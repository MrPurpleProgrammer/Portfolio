{
  "contractName": "Artisan",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "DataStoredInTheLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "portfolio",
          "type": "uint256[]"
        }
      ],
      "name": "ReturnCreateUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "AssetID",
          "type": "uint256"
        }
      ],
      "name": "returnAID",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "CertificateID",
          "type": "uint256"
        }
      ],
      "name": "returnCID",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "LicenseID",
          "type": "uint256"
        }
      ],
      "name": "returnLID",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "AssetIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CertificateIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LIDToCID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LicenseIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "storeDataAsLog",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "storeDataAsString",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "multiHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "multiHash_Function",
          "type": "bytes4"
        }
      ],
      "name": "storeDataAsStruct",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "multiHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4",
              "name": "multiHash_Function",
              "type": "bytes4"
            }
          ],
          "internalType": "struct IPFSEngine.IpfsHash",
          "name": "IpfsHashMemory",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        }
      ],
      "name": "updateUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"DataStoredInTheLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"portfolio\",\"type\":\"uint256[]\"}],\"name\":\"ReturnCreateUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AssetID\",\"type\":\"uint256\"}],\"name\":\"returnAID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CertificateID\",\"type\":\"uint256\"}],\"name\":\"returnCID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LicenseID\",\"type\":\"uint256\"}],\"name\":\"returnLID\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AssetIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CertificateIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LIDToCID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LicenseIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"storeDataAsLog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"storeDataAsString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"multiHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"multiHash_Function\",\"type\":\"bytes4\"}],\"name\":\"storeDataAsStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"multiHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"multiHash_Function\",\"type\":\"bytes4\"}],\"internalType\":\"struct IPFSEngine.IpfsHash\",\"name\":\"IpfsHashMemory\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"updateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/MyData/Projects/Portfolio/dmct/contracts/Artisan.sol\":\"Artisan\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/MyData/Projects/Portfolio/dmct/contracts/Artisan.sol\":{\"keccak256\":\"0x55bbc74befee4adb3f77ad02e87d4cbff3f151d27b786332ca8a6c26e10452b7\",\"urls\":[\"bzz-raw://f8c036d4d778c6dd2dcee5db58ebdbfeccb9af85ed39056533c8de80278df5fe\",\"dweb:/ipfs/QmNVbLaC7ZJUuLCCNJpi3GiJrvKnCDKpdp3cvKMxpFFvY5\"]},\"/C/MyData/Projects/Portfolio/dmct/contracts/IPFSEngine.sol\":{\"keccak256\":\"0xfc263b633cfe5d024a63301673d1086febee27d58b4ea6249ee17860ea386522\",\"urls\":[\"bzz-raw://47a404e75ce6d1830169977b08694f27d656af850e18b4fbd305e1c42dc371c5\",\"dweb:/ipfs/QmPDt6ZipQpDaek3YUXoP57ffJnPzysiuhpV5Si8Xcfkds\"]},\"/C/MyData/Projects/Portfolio/dmct/contracts/Models.sol\":{\"keccak256\":\"0x8ebef18290efd901bee7ffab817c62be030238527f23608fb190eb98335f6bb3\",\"urls\":[\"bzz-raw://0cdc6e1d9e5a7f19ab1b033accd3eccf7b6a7850c62dcc8f61964443cef42c9b\",\"dweb:/ipfs/QmcuTsQHy2tnLEuNSHQsHQdm5SrSfBb8RWZn8rKS5E6Cns\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"urls\":[\"bzz-raw://cb57a28e189cd8b05748db44bdd51d608e6f1364dd1b35ad921e1bc82c10631e\",\"dweb:/ipfs/QmaWWTBbVu2pRR9XUbE4iC159NoP59cRF9ZJwhf4ghFN9i\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xd6b90e604fb2eb2d641c7110c72440bf2dc999ec6ab8ff60f200e71ca75d1d90\",\"urls\":[\"bzz-raw://7b92d8ab83b21ff984b1f0d6d66897d5afb1f2052004cbcb133cea023e0ae468\",\"dweb:/ipfs/QmTarypkQrFp4UMjTh7Zzhz2nZLz5uPS4nJQtHDEuwBVe6\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"urls\":[\"bzz-raw://bd970f51e3a77790c2f02b5b1759827c3b897c3d98c407b3631e8af32e3dc93c\",\"dweb:/ipfs/QmPF85Amgbqjk3SNZKsPCsqCw8JfwYEPMnnhvMJUyX58je\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"urls\":[\"bzz-raw://7f8d45329fecbf0836ad7543330c3ecd0f8d0ffa42d4016278c3eb2215fdcdfe\",\"dweb:/ipfs/QmXWLT7GcnHtA5NiD6MFi2CV3EWJY4wv5mLNnypqYDrxL3\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x5a3de7f7f76e47a071195cf42e2a702265694a6b32037de709463bd8ad784fb5\",\"urls\":[\"bzz-raw://678cbad1f972a4d8c9d47bc39fa6d39560b4fc143c8d9c812a63fe99bb13062e\",\"dweb:/ipfs/QmUhLDvUndcbQLakDNg9G4UXz8UPzRqC6S3rWGKupB6DYs\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5a9f5c29bd7cf0b345e14d97d5f685f68c07e1e5bfdd47e5bcec045e81b0b6ac\",\"urls\":[\"bzz-raw://321cbaa1412fc8d013d8ad3fb5f98c0db7401ddacfb09b70828ea2cebe37397e\",\"dweb:/ipfs/Qmd3Hoc71w6rmxAR6A5VKW9at677VP1L5KDcJnyvu4ksu3\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"urls\":[\"bzz-raw://0c354c3f6e9c487759aa7869be4fba68e0b2efc777b514d289c4cbd3ff8f7e1a\",\"dweb:/ipfs/QmdF9LcSYVmiUCL7JxLEYmSLrjga6zJsujfi6sgEJD4M1z\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"urls\":[\"bzz-raw://430255ad2229ced6d880e61a67bdc6e48dbbaed8354a7c1fe918cd8b8714a886\",\"dweb:/ipfs/QmTHY56odzqEpEC6v6tafaWMYY7vmULw25q5XHJLCCAeox\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"urls\":[\"bzz-raw://ada84513617b7c1b2f890b44503735abaec73a1acd030112a17aac7e6c66a4a1\",\"dweb:/ipfs/QmaiFwdio67iJrfjAdkMac24eJ5sS1qD7CZW6PhUU6KjiK\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"urls\":[\"bzz-raw://7c119bcaecfa853d564ac88d312777f75fa1126a3bca88a3371adb0ad9f35cb0\",\"dweb:/ipfs/QmY9UPuXeSKq86Zh38fE43VGQPhKMN34mkuFSFqPcr6nvZ\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"keccak256\":\"0xf6bdf22fe038e5310b6f0372ecd01f221e2c0b248b45efc404542d94fcac9133\",\"urls\":[\"bzz-raw://6e798f3492180627d6616fa94925b61a9f105347eed9e895f3e18a0eb3dfcd3d\",\"dweb:/ipfs/QmQcTro5nv3Lopf4c4rEe1BuykCfPsjRsJmysdNXtHNUdt\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"urls\":[\"bzz-raw://3b61f99a64e999682ad7bfbb3a1c762a20a0a5b30f9f2011693fa857969af61f\",\"dweb:/ipfs/QmZystFY76wkWCf7V3yKh3buZuKVKbswiE7y6yU62kk3zi\"]},\"/C/MyData/Projects/Portfolio/dmct/node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x16b5422892fbdd9648f12e59de85b42efd57d76b6d6b2358cb46e0f6d4a71aaf\",\"urls\":[\"bzz-raw://4ef38821a4ee756757dc1ce9074ef6096d1b5c760627e92c0852d788dc636ea7\",\"dweb:/ipfs/QmdGwP6BtRMcp4VVJUWwTmXEjYmL52A8WZpBdFJYmzc9pJ\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "1488:2:5:-:0;1461:29;;1526:11;1496:41;;;;1543:35;;1606:19;1584:41;;1653:19;1631:41;;3575:369:11;83:1248:0;3575:369:11;;;;;;;83:1248:0;3575:369:11;;;;;;-1:-1:-1;;;3575:369:11;;768:40:8;-1:-1:-1;;;;;;;;768:18:8;:40;:::i;:::-;3649:13:11;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;3672:17:11;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;3777:40:11;-1:-1:-1;;;;;;;;3777:18:11;:40;:::i;:::-;3827:49;-1:-1:-1;;;;;;;;3827:18:11;:49;:::i;:::-;3886:51;-1:-1:-1;;;;;;;;3886:18:11;:51;:::i;:::-;-1:-1:-1;882:17:7;;-1:-1:-1;902:12:7;-1:-1:-1;;;;;902:10:7;:12;:::i;:::-;924:6;:18;;-1:-1:-1;;;;;;924:18:7;-1:-1:-1;;;;;924:18:7;;;;;;;;957:43;;924:18;;-1:-1:-1;924:18:7;-1:-1:-1;;957:43:7;;-1:-1:-1;;957:43:7;848:159;83:1248:0;;1499:198:8;-1:-1:-1;;;;;;1582:25:8;;;;;1574:66;;;;-1:-1:-1;;;1574:66:8;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1650:33:8;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1650:40:8;1686:4;1650:40;;;1499:198::o;598:104:6:-;685:10;598:104;;:::o;83:1248:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;83:1248:0;;;-1:-1:-1;83:1248:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;342:407:-1;533:2;547:47;;;230:2;518:18;;;860:19;266:30;900:14;;;246:51;316:12;;;504:245;;83:1248:0;;;;;;",
  "deployedSourceMap": "83:1248:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;83:1248:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;965:140:8;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1088:241:0;;;:::i;:::-;;4500:90:11;;;:::i;:::-;;;;;;;;7107:209;;;;;;;;;:::i;:::-;;;;;;;;6665:381;;;;;;;;;:::i;794:288:0:-;;;;;;;;;:::i;6175:200:11:-;;;:::i;:::-;;;;;;;;7955:300;;;;;;;;;:::i;5952:152::-;;;;;;;;;:::i;625:101:3:-;;;;;;;;;:::i;8321:149:11:-;;;;;;;;;:::i;656:27:5:-;;;;;;;;;:::i;6447:161:11:-;;;;;;;;;:::i;234:554:0:-;;;;;;;;;:::i;1836:43:5:-;;;;;;;;;:::i;4271:167:11:-;;;;;;;;;:::i;5786:87::-;;;:::i;4003:211::-;;;;;;;;;:::i;1706:145:7:-;;;:::i;1083:77::-;;;:::i;4654:94:11:-;;;:::i;7383:290::-;;;;;;;;;:::i;299:271:3:-;;;;;;;;;:::i;:::-;;;;;;;;8536:282:11;;;;;;;;;:::i;4814:740::-;;;;;;;;;:::i;205:86:3:-;;;;;;;;;:::i;689:25:5:-;;;;;;;;;:::i;7739:154:11:-;;;;;;;;;:::i;2000:240:7:-;;;;;;;;;:::i;619:31:5:-;;;;;;;;;:::i;965:140:8:-;-1:-1:-1;;;;;;1065:33:8;;1042:4;1065:33;;;;;;;;;;;;;965:140;;;;:::o;1088:241:0:-;1141:10;1180:42;1127:25;;;:13;:25;;;;;;;;:95;;-1:-1:-1;;;;;;1127:95:0;;;1232:39;;;;;;;;;;;;:25;;;;;;;:39;;;;1127:95;1232:34;;;;:39;;:::i;:::-;-1:-1:-1;1281:41:0;;;;;;;;;-1:-1:-1;1281:41:0;;;1295:10;1281:25;;:13;:25;;;;;;;:41;;:35;;;;;:41;;:::i;:::-;;1088:241::o;4500:90:11:-;4578:5;4571:12;;;;;;;;-1:-1:-1;;4571:12:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4546:13;;4571:12;;4578:5;;4571:12;;4578:5;4571:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4500:90;;:::o;7107:209::-;7175:7;7202:16;7210:7;7202;:16::i;:::-;7194:73;;;;-1:-1:-1;;;7194:73:11;;;;;;;;;;;;;;;;;-1:-1:-1;7285:24:11;;;;:15;:24;;;;;;-1:-1:-1;;;;;7285:24:11;;7107:209::o;6665:381::-;6745:13;6761:16;6769:7;6761;:16::i;:::-;6745:32;;6801:5;-1:-1:-1;;;;;6795:11:11;:2;-1:-1:-1;;;;;6795:11:11;;;6787:57;;;;-1:-1:-1;;;6787:57:11;;;;;;;;;6879:5;-1:-1:-1;;;;;6863:21:11;:12;:10;:12::i;:::-;-1:-1:-1;;;;;6863:21:11;;:62;;;;6888:37;6905:5;6912:12;:10;:12::i;6888:37::-;6855:152;;;;-1:-1:-1;;;6855:152:11;;;;;;;;;7018:21;7027:2;7031:7;7018:8;:21::i;:::-;6665:381;;;:::o;794:288:0:-;890:10;876:25;;;;:13;:25;;;;;:37;-1:-1:-1;;;;;876:37:0;855:165;;;;-1:-1:-1;;;855:165:0;;;;;;;;;1044:10;1030:25;;;;:13;:25;;;;;;;;:45;;;;:34;;;;;:45;;;;:::i;:::-;;794:288;:::o;6175:200:11:-;6228:7;6347:21;:12;:19;:21::i;:::-;6340:28;;6175:200;:::o;7955:300::-;8114:41;8133:12;:10;:12::i;:::-;8147:7;8114:18;:41::i;:::-;8106:103;;;;-1:-1:-1;;;8106:103:11;;;;;;;;;8220:28;8230:4;8236:2;8240:7;8220:9;:28::i;5952:152::-;-1:-1:-1;;;;;6067:20:11;;6041:7;6067:20;;;:13;:20;;;;;:30;;6091:5;6067:30;:23;:30;:::i;:::-;6060:37;;5952:152;;;;;:::o;625:101:3:-;693:25;712:5;693:25;;;;;;;;;;;;;;;625:101;:::o;8321:149:11:-;8424:39;8441:4;8447:2;8451:7;8424:39;;;;;;;;;;;;:16;:39::i;656:27:5:-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;656:27:5;:::o;6447:161:11:-;6514:7;;6555:22;:12;6571:5;6555:22;:15;:22;:::i;:::-;-1:-1:-1;6533:44:11;6447:161;-1:-1:-1;;;6447:161:11:o;234:554:0:-;330:10;316:25;;;;:13;:25;;;;;:37;-1:-1:-1;;;;;316:37:0;:99;295:169;;;;-1:-1:-1;;;295:169:0;;;;;;;;;502:90;;;;;;;;520:10;502:90;;;;;;;;;;566:16;;-1:-1:-1;566:16:0;;;;;;;;502:90;;;;;;;474:25;;;:13;:25;;;;;;:118;;;;-1:-1:-1;;;;;;474:118:0;-1:-1:-1;;;;;474:118:0;;;;;;;;;;502:90;;474:25;:118;;-1:-1:-1;474:118:0;;;;;;:::i;:::-;-1:-1:-1;474:118:0;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;651:10:0;637:25;;;;:13;:25;;;;;;;:37;;607:174;;;;-1:-1:-1;607:174:0;;-1:-1:-1;;;;;637:37:0;;;688:34;;;736:35;;;;;607:174;;1836:43:5;;;;;;;;;;;;;:::o;4271:167:11:-;4335:7;4361:70;4378:7;4361:70;;;;;;;;;;;;;;;;;:12;;:70;;:16;:70;:::i;5786:87::-;5858:8;5851:15;;;;;;;;-1:-1:-1;;5851:15:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5826:13;;5851:15;;5858:8;;5851:15;;5858:8;5851:15;;;;;;;;;;;;;;;;;;;;;;;;4003:211;4067:7;-1:-1:-1;;;;;4094:19:11;;4086:74;;;;-1:-1:-1;;;4086:74:11;;;;;;;;;-1:-1:-1;;;;;4178:20:11;;;;;;:13;:20;;;;;:29;;:27;:29::i;1706:145:7:-;1297:12;:10;:12::i;:::-;1287:6;;-1:-1:-1;;;;;1287:6:7;;;:22;;;1279:67;;;;-1:-1:-1;;;1279:67:7;;;;;;;;;1796:6:::1;::::0;1775:40:::1;::::0;1812:1:::1;::::0;-1:-1:-1;;;;;1796:6:7::1;::::0;1775:40:::1;::::0;1812:1;;1775:40:::1;1825:6;:19:::0;;-1:-1:-1;;;;;;1825:19:7::1;::::0;;1706:145::o;1083:77::-;1147:6;;-1:-1:-1;;;;;1147:6:7;1083:77;:::o;4654:94:11:-;4734:7;4727:14;;;;;;;;-1:-1:-1;;4727:14:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4702:13;;4727:14;;4734:7;;4727:14;;4734:7;4727:14;;;;;;;;;;;;;;;;;;;;;;;;7383:290;7497:12;:10;:12::i;:::-;-1:-1:-1;;;;;7485:24:11;:8;-1:-1:-1;;;;;7485:24:11;;;7477:62;;;;-1:-1:-1;;;7477:62:11;;;;;;;;;7595:8;7550:18;:32;7569:12;:10;:12::i;:::-;-1:-1:-1;;;;;7550:32:11;;;;;;;;;;;;;;;;;-1:-1:-1;7550:32:11;;;:42;;;;;;;;;;;;:53;;-1:-1:-1;;7550:53:11;;;;;;;;;;;7633:12;:10;:12::i;:::-;-1:-1:-1;;;;;7618:48:11;;7657:8;7618:48;;;;;;;;;;;;;;;7383:290;;:::o;299:271:3:-;418:30;;:::i;:::-;461:36;;;-1:-1:-1;;;;;;508:54:3;:33;;;:54;461:14;299:271::o;8536:282:11:-;8667:41;8686:12;:10;:12::i;:::-;8700:7;8667:18;:41::i;:::-;8659:103;;;;-1:-1:-1;;;8659:103:11;;;;;;;;;8772:39;8786:4;8792:2;8796:7;8805:5;8772:13;:39::i;:::-;8536:282;;;;:::o;4814:740::-;4879:13;4912:16;4920:7;4912;:16::i;:::-;4904:76;;;;-1:-1:-1;;;4904:76:11;;;;;;;;;5017:19;;;;:10;:19;;;;;;;;;4991:45;;;;;;-1:-1:-1;;4991:45:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;;:45;;;5017:19;4991:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5115:8:11;5109:22;4991:45;;-1:-1:-1;;;;5109:22:11;-1:-1:-1;;5109:22:11;;;;;;;;;;;5105:74;;5159:9;-1:-1:-1;5152:16:11;;5105:74;5281:23;;:27;5277:110;;5355:8;5365:9;5338:37;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5338:37:11;;;5324:52;;;;;5277:110;5517:8;5527:18;:7;:16;:18::i;:::-;5500:46;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5500:46:11;;;5486:61;;;4814:740;;;:::o;205:86:3:-;271:12;;;;:4;;:12;;;;;:::i;689:25:5:-;;;;;;;;;;7739:154:11;-1:-1:-1;;;;;7851:25:11;;;7828:4;7851:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;7739:154::o;2000:240:7:-;1297:12;:10;:12::i;:::-;1287:6;;-1:-1:-1;;;;;1287:6:7;;;:22;;;1279:67;;;;-1:-1:-1;;;1279:67:7;;;;;;;;;-1:-1:-1;;;;;2088:22:7;::::1;2080:73;;;;-1:-1:-1::0;;;2080:73:7::1;;;;;;;;;2189:6;::::0;2168:38:::1;::::0;-1:-1:-1;;;;;2168:38:7;;::::1;::::0;2189:6:::1;::::0;2168:38:::1;::::0;2189:6:::1;::::0;2168:38:::1;2216:6;:17:::0;;-1:-1:-1;;;;;;2216:17:7::1;-1:-1:-1::0;;;;;2216:17:7;;;::::1;::::0;;;::::1;::::0;;2000:240::o;619:31:5:-;;;;;;;;;;10252:117:11;10309:4;10332:30;:12;10354:7;10332:30;:21;:30;:::i;598:104:6:-;685:10;598:104;:::o;15908:155:11:-;15973:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15973:29:11;-1:-1:-1;;;;;15973:29:11;;;;;;;;:24;;16026:16;15973:24;16026:7;:16::i;:::-;-1:-1:-1;;;;;16017:39:11;;;;;;;;;;;15908:155;;:::o;7031:121:17:-;7100:7;7126:19;7134:3;7126:7;:19::i;10527:329:11:-;10612:4;10636:16;10644:7;10636;:16::i;:::-;10628:73;;;;-1:-1:-1;;;10628:73:11;;;;;;;;;10711:13;10727:16;10735:7;10727;:16::i;:::-;10711:32;;10772:5;-1:-1:-1;;;;;10761:16:11;:7;-1:-1:-1;;;;;10761:16:11;;:51;;;;10805:7;-1:-1:-1;;;;;10781:31:11;:20;10793:7;10781:11;:20::i;:::-;-1:-1:-1;;;;;10781:31:11;;10761:51;:87;;;;10816:32;10833:5;10840:7;10816:16;:32::i;:::-;10753:96;10527:329;-1:-1:-1;;;;10527:329:11:o;13521:559::-;13638:4;-1:-1:-1;;;;;13618:24:11;:16;13626:7;13618;:16::i;:::-;-1:-1:-1;;;;;13618:24:11;;13610:78;;;;-1:-1:-1;;;13610:78:11;;;;;;;;;-1:-1:-1;;;;;13706:16:11;;13698:65;;;;-1:-1:-1;;;13698:65:11;;;;;;;;;13774:39;13795:4;13801:2;13805:7;13774:20;:39::i;:::-;13875:29;13892:1;13896:7;13875:8;:29::i;:::-;-1:-1:-1;;;;;13915:19:11;;;;;;:13;:19;;;;;:35;;13942:7;13915:35;:26;:35;:::i;:::-;-1:-1:-1;;;;;;13960:17:11;;;;;;:13;:17;;;;;:30;;13982:7;13960:30;:21;:30;:::i;:::-;-1:-1:-1;14001:29:11;:12;14018:7;14027:2;14001:29;:16;:29;:::i;:::-;;14065:7;14061:2;-1:-1:-1;;;;;14046:27:11;14055:4;-1:-1:-1;;;;;14046:27:11;;;;;;;;;;;13521:559;;;:::o;9214:135:18:-;9285:7;9319:22;9323:3;9335:5;9319:3;:22::i;7480:224:17:-;7560:7;;;;7619:22;7623:3;7635:5;7619:3;:22::i;:::-;7588:53;;;;-1:-1:-1;7480:224:17;-1:-1:-1;;;;;7480:224:17:o;8123:202::-;8230:7;8272:44;8277:3;8297;8303:12;8272:4;:44::i;:::-;8264:53;-1:-1:-1;8123:202:17;;;;;;:::o;9680:269:11:-;9793:28;9803:4;9809:2;9813:7;9793:9;:28::i;:::-;9839:48;9862:4;9868:2;9872:7;9881:5;9839:22;:48::i;:::-;9831:111;;;;-1:-1:-1;;;9831:111:11;;;;;;;;210:723:19;266:13;483:10;479:51;;-1:-1:-1;509:10:19;;;;;;;;;;;;-1:-1:-1;;;509:10:19;;;;;;479:51;554:5;539:12;593:75;600:9;;593:75;;625:8;;655:2;647:10;;;;593:75;;;677:19;709:6;699:17;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;104:10;699:17:19;87:34:-1;135:17;;-1:-1;699:17:19;-1:-1:-1;769:5:19;;-1:-1:-1;677:39:19;-1:-1:-1;;;742:10:19;;784:112;791:9;;784:112;;857:2;850:4;:9;845:2;:14;834:27;;816:6;823:7;;;;;;;816:15;;;;;;;;;;;:45;-1:-1:-1;;;;;816:45:19;;;;;;;;-1:-1:-1;883:2:19;875:10;;;;784:112;;;-1:-1:-1;919:6:19;210:723;-1:-1:-1;;;;210:723:19:o;6799:149:17:-;6883:4;6906:35;6916:3;6936;6906:9;:35::i;4491:108::-;4573:19;;4491:108::o;8329:135:18:-;8399:4;8422:35;8430:3;8450:5;8422:7;:35::i;8032:129::-;8099:4;8122:32;8127:3;8147:5;8122:4;:32::i;6247:174:17:-;6336:4;6359:55;6364:3;6384;-1:-1:-1;;;;;6398:14:17;;6359:4;:55::i;4452:201:18:-;4546:18;;4519:7;;4546:26;-1:-1:-1;4538:73:18;;;;-1:-1:-1;;;4538:73:18;;;;;;;;;4628:3;:11;;4640:5;4628:18;;;;;;;;;;;;;;;;4621:25;;4452:201;;;;:::o;4942:274:17:-;5045:19;;5009:7;;;;5045:27;-1:-1:-1;5037:74:17;;;;-1:-1:-1;;;5037:74:17;;;;;;;;;5122:22;5147:3;:12;;5160:5;5147:19;;;;;;;;;;;;;;;;;;5122:44;;5184:5;:10;;;5196:5;:12;;;5176:33;;;;;4942:274;;;;;:::o;5623:315::-;5717:7;5755:17;;;:12;;;:17;;;;;;5805:12;5790:13;5782:36;;;;-1:-1:-1;;;5782:36:17;;;;;;;;;;;5871:3;:12;;5895:1;5884:8;:12;5871:26;;;;;;;;;;;;;;;;;;:33;;;5864:40;;;5623:315;;;;;:::o;15313:589:11:-;15433:4;15458:15;:2;-1:-1:-1;;;;;15458:13:11;;:15::i;:::-;15453:58;;-1:-1:-1;15496:4:11;15489:11;;15453:58;15520:23;15546:246;-1:-1:-1;;;15657:12:11;:10;:12::i;:::-;15683:4;15701:7;15722:5;15562:175;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;15562:175:11;;;;-1:-1:-1;;;;;15562:175:11;;38:4:-1;29:7;25:18;67:10;61:17;-1:-1;;;;;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;15562:175:11;15546:246;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15546:15:11;;;:246;;:15;:246;:::i;:::-;15520:272;;15802:13;15829:10;15818:32;;;;;;;;;;;;;;-1:-1:-1;;;;;;15868:26:11;-1:-1:-1;;;15868:26:11;;-1:-1:-1;;;15313:589:11;;;;;;:::o;4278:123:17:-;4349:4;4372:17;;;:12;;;;;:17;;;;;;:22;;;4278:123::o;2212:1512:18:-;2278:4;2415:19;;;:12;;;:19;;;;;;2449:15;;2445:1273;;2878:18;;-1:-1:-1;;2830:14:18;;;;2878:22;;;;2806:21;;2878:3;;:22;;3160;;;;;;;;;;;;;;3140:42;;3303:9;3274:3;:11;;3286:13;3274:26;;;;;;;;;;;;;;;;;;;:38;;;;3378:23;;;3420:1;3378:12;;;:23;;;;;;3404:17;;;3378:43;;3527:17;;3378:3;;3527:17;;;;;;;;;;;;;;;;;;;;;;3619:3;:12;;:19;3632:5;3619:19;;;;;;;;;;;3612:26;;;3660:4;3653:11;;;;;;;;2445:1273;3702:5;3695:12;;;;;1640:404;1703:4;1724:21;1734:3;1739:5;1724:9;:21::i;:::-;1719:319;;-1:-1:-1;27:10;;39:1;23:18;;;45:23;;1761:11:18;:23;;;;;;;;;;;;;1941:18;;1919:19;;;:12;;;:19;;;;;;:40;;;;1973:11;;1719:319;-1:-1:-1;2022:5:18;2015:12;;1836:678:17;1912:4;2045:17;;;:12;;;:17;;;;;;2077:13;2073:435;;-1:-1:-1;;2161:38:17;;;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;2143:12:17;:57;;;;;;;;;;;;;;;;;;;;;;;;2355:19;;2335:17;;;:12;;;:17;;;;;;;:39;2388:11;;2073:435;2466:5;2430:3;:12;;2454:1;2443:8;:12;2430:26;;;;;;;;;;;;;;;;;;:33;;:41;;;;2492:5;2485:12;;;;;726:413:16;1086:20;1124:8;;;726:413::o;3581:193::-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3684;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;-1:-1:-1;;;4850:60:16;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:16;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;4980:75:16;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:16:o;6111:725::-;6226:12;6254:7;6250:580;;;-1:-1:-1;6284:10:16;6277:17;;6250:580;6395:17;;:21;6391:429;;6653:10;6647:17;6713:15;6700:10;6696:2;6692:19;6685:44;6602:145;6792:12;6785:20;;-1:-1:-1;;;6785:20:16;;;;;;;;;83:1248:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;83:1248:0;;;-1:-1:-1;83:1248:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;83:1248:0;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;5:130:-1;72:20;;-1:-1;;;;;32900:54;;34063:35;;34053:2;;34112:1;;34102:12;685:440;;786:3;779:4;771:6;767:17;763:27;753:2;;-1:-1;;794:12;753:2;841:6;828:20;30007:18;;29999:6;29996:30;29993:2;;;-1:-1;;30029:12;29993:2;29663;29657:9;30102;30083:17;;-1:-1;;30079:33;29689:17;;30170:4;29689:17;29749:34;;;29785:22;;;29746:62;29743:2;;;-1:-1;;29811:12;29743:2;29663;29830:22;933:21;;;854:73;-1:-1;854:73;1033:16;;;30170:4;1033:16;1030:25;-1:-1;1027:2;;;1068:1;;1058:12;1027:2;33127:6;30170:4;975:6;971:17;30170:4;1009:5;1005:16;33104:30;33183:1;30170:4;33174:6;1009:5;33165:16;;33158:27;;;;746:379;;;;;1721:241;;1825:2;1813:9;1804:7;1800:23;1796:32;1793:2;;;-1:-1;;1831:12;1793:2;1893:53;1938:7;1914:22;1893:53;;1969:366;;;2090:2;2078:9;2069:7;2065:23;2061:32;2058:2;;;-1:-1;;2096:12;2058:2;2158:53;2203:7;2179:22;2158:53;;;2148:63;;2266:53;2311:7;2248:2;2291:9;2287:22;2266:53;;;2256:63;;2052:283;;;;;;2342:491;;;;2480:2;2468:9;2459:7;2455:23;2451:32;2448:2;;;-1:-1;;2486:12;2448:2;85:6;72:20;97:33;124:5;97:33;;;2538:63;-1:-1;2638:2;2677:22;;72:20;97:33;72:20;97:33;;;2442:391;;2646:63;;-1:-1;;;2746:2;2785:22;;;;1651:20;;2442:391;2840:721;;;;;3004:3;2992:9;2983:7;2979:23;2975:33;2972:2;;;-1:-1;;3011:12;2972:2;3073:53;3118:7;3094:22;3073:53;;;3063:63;;3181:53;3226:7;3163:2;3206:9;3202:22;3181:53;;;3171:63;;3271:2;3314:9;3310:22;1651:20;3279:63;;3407:2;3396:9;3392:18;3379:32;3431:18;3423:6;3420:30;3417:2;;;-1:-1;;3453:12;3417:2;3483:62;3537:7;3528:6;3517:9;3513:22;3483:62;;;3473:72;;;2966:595;;;;;;;;3568:360;;;3686:2;3674:9;3665:7;3661:23;3657:32;3654:2;;;-1:-1;;3692:12;3654:2;3754:53;3799:7;3775:22;3754:53;;;3744:63;;3844:2;3884:9;3880:22;206:20;34209:5;32582:13;32575:21;34187:5;34184:32;34174:2;;-1:-1;;34220:12;34174:2;3852:60;;;;3648:280;;;;;;3935:366;;;4056:2;4044:9;4035:7;4031:23;4027:32;4024:2;;;-1:-1;;4062:12;4024:2;4124:53;4169:7;4145:22;4124:53;;;4114:63;4214:2;4253:22;;;;1651:20;;-1:-1;;;4018:283;4308:364;;;4428:2;4416:9;4407:7;4403:23;4399:32;4396:2;;;-1:-1;;4434:12;4396:2;353:6;340:20;4486:63;;4586:2;4628:9;4624:22;476:20;501:32;527:5;501:32;;4679:239;;4782:2;4770:9;4761:7;4757:23;4753:32;4750:2;;;-1:-1;;4788:12;4750:2;489:6;476:20;501:32;527:5;501:32;;4925:261;;5039:2;5027:9;5018:7;5014:23;5010:32;5007:2;;;-1:-1;;5045:12;5007:2;628:6;622:13;640:32;666:5;640:32;;5193:347;;5307:2;5295:9;5286:7;5282:23;5278:32;5275:2;;;-1:-1;;5313:12;5275:2;5371:17;5358:31;5409:18;5401:6;5398:30;5395:2;;;-1:-1;;5431:12;5395:2;5461:63;5516:7;5507:6;5496:9;5492:22;5461:63;;5547:241;;5651:2;5639:9;5630:7;5626:23;5622:32;5619:2;;;-1:-1;;5657:12;5619:2;-1:-1;1651:20;;5613:175;-1:-1;5613:175;6272:709;;6459:5;30972:12;31514:6;31509:3;31502:19;31551:4;;31546:3;31542:14;6471:93;;30641:3;-1:-1;30631:14;31551:4;-1:-1;30660:18;-1:-1;6671:288;6696:6;6693:1;6690:13;6671:288;;;33765:11;;7161:37;;5949:14;;;;6718:1;31357:14;;;;6711:9;6671:288;;;-1:-1;6965:10;;6393:588;-1:-1;;;;;6393:588;7317:343;;7459:5;31101:12;31514:6;31509:3;31502:19;7552:52;7597:6;31551:4;31546:3;31542:14;31551:4;7578:5;7574:16;7552:52;;;30102:9;33857:14;-1:-1;;33853:28;7616:39;;;;31551:4;7616:39;;7407:253;-1:-1;;7407:253;18422:262;;7827:5;31101:12;7938:52;7983:6;7978:3;7971:4;7964:5;7960:16;7938:52;;;8002:16;;;;;18547:137;-1:-1;;18547:137;18691:421;;-1:-1;9769:5;9763:12;9803:1;;9792:9;9788:17;9816:1;9811:268;;;;10090:1;10085:425;;;;9781:729;;9811:268;-1:-1;;10016:25;;10004:38;;9885:1;9870:17;;9889:4;9866:28;10056:16;;;-1:-1;9811:268;;10085:425;10154:1;10143:9;10139:17;30641:3;-1:-1;30631:14;30673:4;;-1:-1;30660:18;-1:-1;10343:130;10357:6;10354:1;10351:13;10343:130;;;10416:14;;10403:11;;;10396:35;10450:15;;;;10372:12;;10343:130;;;-1:-1;;;10487:16;;;-1:-1;9781:729;;;;7827:5;31101:12;7938:52;7983:6;7978:3;7971:4;7964:5;7960:16;7938:52;;;8002:16;;18863:249;-1:-1;;;;18863:249;19119:213;-1:-1;;;;;32900:54;;;;6064:45;;19237:2;19222:18;;19208:124;19339:663;-1:-1;;;;;32900:54;;;6064:45;;32900:54;;19756:2;19741:18;;6064:45;19839:2;19824:18;;7161:37;;;19575:3;19876:2;19861:18;;19854:48;;;19339:663;;19916:76;;19560:19;;19978:6;19916:76;;;19908:84;19546:456;-1:-1;;;;;;19546:456;20009:659;;20247:2;20236:9;20232:18;32911:42;;;;;6102:5;32900:54;6071:3;6064:45;20365:2;20247;20365;20354:9;20350:18;20343:48;-1:-1;8895:5;8889:12;8929:1;;8918:9;8914:17;8942:1;8937:248;;;;9196:1;9191:402;;;;8907:686;;8937:248;9034:71;9015:4;9011:1;9000:9;8996:17;8992:28;9093:3;9034:71;;;-1:-1;;9124:25;;9112:38;;9164:14;;;-1:-1;8937:248;;9191:402;9260:1;9249:9;9245:17;9276:71;9340:6;9335:3;9276:71;;;9369:38;9401:5;9369:38;;;-1:-1;9431:130;9445:6;9442:1;9439:13;9431:130;;;9504:14;;9491:11;;;9484:35;9538:15;;;;9460:12;;9431:130;;;9575:11;;;;;-1:-1;;;8907:686;;;;20528:9;20522:4;20518:20;20513:2;20502:9;20498:18;20491:48;20553:105;20653:4;20644:6;20553:105;;;20545:113;20218:450;-1:-1;;;;;;;;20218:450;20675:201;32582:13;;32575:21;7054:34;;20787:2;20772:18;;20758:118;20883:301;;21021:2;21042:17;21035:47;21096:78;21021:2;21010:9;21006:18;21160:6;21096:78;;21191:407;21382:2;21396:47;;;10749:2;21367:18;;;31502:19;10785:34;31542:14;;;10765:55;-1:-1;;;10840:12;;;10833:26;10878:12;;;21353:245;21605:407;21796:2;21810:47;;;11129:2;21781:18;;;31502:19;11165:34;31542:14;;;11145:55;-1:-1;;;11220:12;;;11213:42;11274:12;;;21767:245;22019:407;22210:2;22224:47;;;11525:2;22195:18;;;31502:19;11561:34;31542:14;;;11541:55;-1:-1;;;11616:12;;;11609:30;11658:12;;;22181:245;22433:407;22624:2;22638:47;;;11909:2;22609:18;;;31502:19;11945:34;31542:14;;;11925:55;-1:-1;;;12000:12;;;11993:28;12040:12;;;22595:245;22847:407;23038:2;23052:47;;;12291:2;23023:18;;;31502:19;12327:27;31542:14;;;12307:48;12374:12;;;23009:245;23675:407;23866:2;23880:47;;;13009:2;23851:18;;;31502:19;13045:34;31542:14;;;13025:55;-1:-1;;;13100:12;;;13093:36;13148:12;;;23837:245;24089:407;24280:2;24294:47;;;13399:2;24265:18;;;31502:19;13435:25;31542:14;;;13415:46;13480:12;;;24251:245;24503:407;24694:2;24708:47;;;13731:2;24679:18;;;31502:19;13767:34;31542:14;;;13747:55;13836:26;13822:12;;;13815:48;13882:12;;;24665:245;24917:407;25108:2;25122:47;;;14133:2;25093:18;;;31502:19;14169:34;31542:14;;;14149:55;-1:-1;;;14224:12;;;14217:34;14270:12;;;25079:245;25331:407;25522:2;25536:47;;;14521:2;25507:18;;;31502:19;14557:34;31542:14;;;14537:55;-1:-1;;;14612:12;;;14605:26;14650:12;;;25493:245;25745:407;25936:2;25950:47;;;14901:2;25921:18;;;31502:19;14937:34;31542:14;;;14917:55;-1:-1;;;14992:12;;;14985:36;15040:12;;;25907:245;26159:407;26350:2;26364:47;;;26335:18;;;31502:19;15327:34;31542:14;;;15307:55;15381:12;;;26321:245;26573:407;26764:2;26778:47;;;15632:2;26749:18;;;31502:19;15668:34;31542:14;;;15648:55;-1:-1;;;15723:12;;;15716:33;15768:12;;;26735:245;26987:407;27178:2;27192:47;;;16019:2;27163:18;;;31502:19;16055:34;31542:14;;;16035:55;-1:-1;;;16110:12;;;16103:39;16161:12;;;27149:245;27401:407;27592:2;27606:47;;;16412:2;27577:18;;;31502:19;16448:34;31542:14;;;16428:55;-1:-1;;;16503:12;;;16496:25;16540:12;;;27563:245;27815:407;28006:2;28020:47;;;16791:2;27991:18;;;31502:19;-1:-1;;;31542:14;;;16807:42;16868:12;;;27977:245;28229:407;28420:2;28434:47;;;17119:2;28405:18;;;31502:19;17155:34;31542:14;;;17135:55;-1:-1;;;17210:12;;;17203:41;17263:12;;;28391:245;28643:407;28834:2;28848:47;;;17514:2;28819:18;;;31502:19;17550:31;31542:14;;;17530:52;17601:12;;;28805:245;29057:317;17906:23;;7161:37;;18091:4;18080:16;;;18074:23;-1:-1;;;;;;32748:78;18149:14;;;7269:36;;;;29227:2;29212:18;;29198:176;29381:213;7161:37;;;29499:2;29484:18;;29470:124;30521:173;;30631:14;;;30673:4;30660:18;;;30590:104;33200:268;33265:1;33272:101;33286:6;33283:1;33280:13;33272:101;;;33353:11;;;33347:18;33334:11;;;33327:39;33308:2;33301:10;33272:101;;;33388:6;33385:1;33382:13;33379:2;;;-1:-1;;33265:1;33435:16;;33428:27;33249:219;34004:117;-1:-1;;;;;32900:54;;34063:35;;34053:2;;34112:1;;34102:12;34370:115;-1:-1;;;;;;32748:78;;34428:34;;34418:2;;34476:1;;34466:12",
  "source": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./Models.sol\";\n\ncontract Artisan is Models {\n    event ReturnCreateUser(\n        address userAddress,\n        string userName,\n        uint256[] portfolio\n    );\n\n    function createUser(string memory userName) public {\n        require(\n            addressToUser[msg.sender].userAddress ==\n                0x0000000000000000000000000000000000000000,\n            \"This User already exist\"\n        );\n        addressToUser[msg.sender] = User(\n            msg.sender,\n            userName,\n            new uint256[](0)\n        );\n        emit ReturnCreateUser(\n            addressToUser[msg.sender].userAddress,\n            addressToUser[msg.sender].userName,\n            addressToUser[msg.sender].portfolio\n        );\n    }\n\n    function updateUser(string memory userName) public {\n        require(\n            addressToUser[msg.sender].userAddress !=\n                0x0000000000000000000000000000000000000000,\n            \"User does not exist\"\n        );\n        addressToUser[msg.sender].userName = userName;\n    }\n\n    function deleteUser() public {\n        addressToUser[msg.sender]\n            .userAddress = 0x0000000000000000000000000000000000000000;\n        addressToUser[msg.sender].userName = \"\";\n        addressToUser[msg.sender].portfolio = [0];\n    }\n}\n",
  "sourcePath": "C:\\MyData\\Projects\\Portfolio\\dmct\\contracts\\Artisan.sol",
  "ast": {
    "absolutePath": "/C/MyData/Projects/Portfolio/dmct/contracts/Artisan.sol",
    "exportedSymbols": {
      "Artisan": [
        120
      ]
    },
    "id": 121,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "24:33:0"
      },
      {
        "absolutePath": "/C/MyData/Projects/Portfolio/dmct/contracts/Models.sol",
        "file": "./Models.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 121,
        "sourceUnit": 1775,
        "src": "59:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "Models",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1774,
              "src": "103:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Models_$1774",
                "typeString": "contract Models"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "103:6:0"
          }
        ],
        "contractDependencies": [
          1233,
          1774,
          1797,
          1900,
          1953,
          1963,
          3051,
          3154,
          3181,
          3204
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 120,
        "linearizedBaseContracts": [
          120,
          1774,
          1233,
          1900,
          3051,
          3181,
          3204,
          3154,
          1953,
          1963,
          1797
        ],
        "name": "Artisan",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 14,
            "name": "ReturnCreateUser",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "indexed": false,
                  "name": "userAddress",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "148:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "148:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9,
                  "indexed": false,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "177:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "177:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12,
                  "indexed": false,
                  "name": "portfolio",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "202:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "202:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "202:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "138:89:0"
            },
            "src": "116:112:0"
          },
          {
            "body": {
              "id": 64,
              "nodeType": "Block",
              "src": "285:503:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 20,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1447,
                              "src": "316:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 23,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 21,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "330:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 22,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "330:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "316:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1344_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1338,
                          "src": "316:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "373:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "316:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54686973205573657220616c7265616479206578697374",
                        "id": 27,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "429:25:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_65e698f9def6e52a25c977f0c2aa9dc4ab4dd8b037c3cad2bd104d9e680e0013",
                          "typeString": "literal_string \"This User already exist\""
                        },
                        "value": "This User already exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_65e698f9def6e52a25c977f0c2aa9dc4ab4dd8b037c3cad2bd104d9e680e0013",
                          "typeString": "literal_string \"This User already exist\""
                        }
                      ],
                      "id": 19,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "295:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "295:169:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "295:169:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 30,
                        "name": "addressToUser",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1447,
                        "src": "474:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                          "typeString": "mapping(address => struct Models.User storage ref)"
                        }
                      },
                      "id": 33,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 31,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "488:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "488:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "474:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1344_storage",
                        "typeString": "struct Models.User storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 35,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "520:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "520:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 37,
                          "name": "userName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16,
                          "src": "544:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "580:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 40,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "566:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 38,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "570:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 39,
                              "length": null,
                              "nodeType": "ArrayTypeName",
                              "src": "570:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "566:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        ],
                        "id": 34,
                        "name": "User",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1344,
                        "src": "502:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_User_$1344_storage_ptr_$",
                          "typeString": "type(struct Models.User storage pointer)"
                        }
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "502:90:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1344_memory",
                        "typeString": "struct Models.User memory"
                      }
                    },
                    "src": "474:118:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_User_$1344_storage",
                      "typeString": "struct Models.User storage ref"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "474:118:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 47,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1447,
                            "src": "637:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 50,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 48,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "651:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 49,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "651:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "637:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1344_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 51,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1338,
                        "src": "637:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 52,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1447,
                            "src": "688:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 55,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 53,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "702:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 54,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "702:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "688:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1344_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userName",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1340,
                        "src": "688:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 57,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1447,
                            "src": "736:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 60,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 58,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "750:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "750:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "736:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1344_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 61,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "portfolio",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1343,
                        "src": "736:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      ],
                      "id": 46,
                      "name": "ReturnCreateUser",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "607:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (address,string memory,uint256[] memory)"
                      }
                    },
                    "id": 62,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "607:174:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 63,
                  "nodeType": "EmitStatement",
                  "src": "602:179:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "507ffba5",
            "id": 65,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 65,
                  "src": "254:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 15,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "254:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "253:24:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "285:0:0"
            },
            "scope": 120,
            "src": "234:554:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "845:237:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 77,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 71,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1447,
                              "src": "876:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 74,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 72,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "890:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 73,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "890:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "876:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1344_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 75,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1338,
                          "src": "876:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "933:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "876:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5573657220646f6573206e6f74206578697374",
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "989:21:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        },
                        "value": "User does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        }
                      ],
                      "id": 70,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "855:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 79,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "855:165:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80,
                  "nodeType": "ExpressionStatement",
                  "src": "855:165:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 81,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1030:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 84,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 82,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1044:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 83,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1044:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1030:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 85,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1340,
                      "src": "1030:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 86,
                      "name": "userName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 67,
                      "src": "1067:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1030:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "1030:45:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "0b4f12f6",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 90,
                  "src": "814:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 66,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "814:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "813:24:0"
            },
            "returnParameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "845:0:0"
            },
            "scope": 120,
            "src": "794:288:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "1117:212:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 93,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1127:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 96,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1141:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1141:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1127:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1338,
                      "src": "1127:50:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                      "id": 98,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1180:42:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "value": "0x0000000000000000000000000000000000000000"
                    },
                    "src": "1127:95:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 100,
                  "nodeType": "ExpressionStatement",
                  "src": "1127:95:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 101,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1232:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 104,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 102,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1246:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1246:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1232:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 105,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1340,
                      "src": "1232:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "",
                      "id": 106,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1269:2:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                        "typeString": "literal_string \"\""
                      },
                      "value": ""
                    },
                    "src": "1232:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 108,
                  "nodeType": "ExpressionStatement",
                  "src": "1232:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 109,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1281:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 112,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 110,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1295:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1295:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1281:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 113,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "portfolio",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1343,
                      "src": "1281:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1320:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "id": 115,
                      "isConstant": false,
                      "isInlineArray": true,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "1319:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint8_$1_memory_ptr",
                        "typeString": "uint8[1] memory"
                      }
                    },
                    "src": "1281:41:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "1281:41:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "026ff05e",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1107:2:0"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1117:0:0"
            },
            "scope": 120,
            "src": "1088:241:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 121,
        "src": "83:1248:0"
      }
    ],
    "src": "0:1332:0"
  },
  "legacyAST": {
    "absolutePath": "/C/MyData/Projects/Portfolio/dmct/contracts/Artisan.sol",
    "exportedSymbols": {
      "Artisan": [
        120
      ]
    },
    "id": 121,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "24:33:0"
      },
      {
        "absolutePath": "/C/MyData/Projects/Portfolio/dmct/contracts/Models.sol",
        "file": "./Models.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 121,
        "sourceUnit": 1775,
        "src": "59:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "Models",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1774,
              "src": "103:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Models_$1774",
                "typeString": "contract Models"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "103:6:0"
          }
        ],
        "contractDependencies": [
          1233,
          1774,
          1797,
          1900,
          1953,
          1963,
          3051,
          3154,
          3181,
          3204
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 120,
        "linearizedBaseContracts": [
          120,
          1774,
          1233,
          1900,
          3051,
          3181,
          3204,
          3154,
          1953,
          1963,
          1797
        ],
        "name": "Artisan",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 14,
            "name": "ReturnCreateUser",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "indexed": false,
                  "name": "userAddress",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "148:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "148:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9,
                  "indexed": false,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "177:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "177:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12,
                  "indexed": false,
                  "name": "portfolio",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "202:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "202:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "202:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "138:89:0"
            },
            "src": "116:112:0"
          },
          {
            "body": {
              "id": 64,
              "nodeType": "Block",
              "src": "285:503:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 20,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1447,
                              "src": "316:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 23,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 21,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "330:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 22,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "330:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "316:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1344_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1338,
                          "src": "316:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "373:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "316:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54686973205573657220616c7265616479206578697374",
                        "id": 27,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "429:25:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_65e698f9def6e52a25c977f0c2aa9dc4ab4dd8b037c3cad2bd104d9e680e0013",
                          "typeString": "literal_string \"This User already exist\""
                        },
                        "value": "This User already exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_65e698f9def6e52a25c977f0c2aa9dc4ab4dd8b037c3cad2bd104d9e680e0013",
                          "typeString": "literal_string \"This User already exist\""
                        }
                      ],
                      "id": 19,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "295:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "295:169:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "295:169:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 30,
                        "name": "addressToUser",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1447,
                        "src": "474:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                          "typeString": "mapping(address => struct Models.User storage ref)"
                        }
                      },
                      "id": 33,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 31,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "488:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "488:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "474:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1344_storage",
                        "typeString": "struct Models.User storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 35,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "520:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "520:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 37,
                          "name": "userName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16,
                          "src": "544:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "580:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 40,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "566:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 38,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "570:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 39,
                              "length": null,
                              "nodeType": "ArrayTypeName",
                              "src": "570:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "566:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        ],
                        "id": 34,
                        "name": "User",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1344,
                        "src": "502:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_User_$1344_storage_ptr_$",
                          "typeString": "type(struct Models.User storage pointer)"
                        }
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "502:90:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1344_memory",
                        "typeString": "struct Models.User memory"
                      }
                    },
                    "src": "474:118:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_User_$1344_storage",
                      "typeString": "struct Models.User storage ref"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "474:118:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 47,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1447,
                            "src": "637:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 50,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 48,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "651:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 49,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "651:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "637:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1344_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 51,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1338,
                        "src": "637:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 52,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1447,
                            "src": "688:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 55,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 53,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "702:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 54,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "702:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "688:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1344_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userName",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1340,
                        "src": "688:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 57,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1447,
                            "src": "736:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 60,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 58,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "750:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "750:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "736:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1344_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 61,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "portfolio",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1343,
                        "src": "736:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      ],
                      "id": 46,
                      "name": "ReturnCreateUser",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "607:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (address,string memory,uint256[] memory)"
                      }
                    },
                    "id": 62,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "607:174:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 63,
                  "nodeType": "EmitStatement",
                  "src": "602:179:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "507ffba5",
            "id": 65,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 65,
                  "src": "254:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 15,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "254:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "253:24:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "285:0:0"
            },
            "scope": 120,
            "src": "234:554:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "845:237:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 77,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 71,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1447,
                              "src": "876:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 74,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 72,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "890:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 73,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "890:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "876:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1344_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 75,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1338,
                          "src": "876:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "933:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "876:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5573657220646f6573206e6f74206578697374",
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "989:21:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        },
                        "value": "User does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        }
                      ],
                      "id": 70,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "855:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 79,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "855:165:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80,
                  "nodeType": "ExpressionStatement",
                  "src": "855:165:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 81,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1030:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 84,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 82,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1044:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 83,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1044:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1030:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 85,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1340,
                      "src": "1030:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 86,
                      "name": "userName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 67,
                      "src": "1067:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1030:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "1030:45:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "0b4f12f6",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 90,
                  "src": "814:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 66,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "814:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "813:24:0"
            },
            "returnParameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "845:0:0"
            },
            "scope": 120,
            "src": "794:288:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "1117:212:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 93,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1127:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 96,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1141:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1141:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1127:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1338,
                      "src": "1127:50:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                      "id": 98,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1180:42:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "value": "0x0000000000000000000000000000000000000000"
                    },
                    "src": "1127:95:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 100,
                  "nodeType": "ExpressionStatement",
                  "src": "1127:95:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 101,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1232:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 104,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 102,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1246:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1246:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1232:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 105,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1340,
                      "src": "1232:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "",
                      "id": 106,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1269:2:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                        "typeString": "literal_string \"\""
                      },
                      "value": ""
                    },
                    "src": "1232:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 108,
                  "nodeType": "ExpressionStatement",
                  "src": "1232:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 109,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "1281:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1344_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 112,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 110,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1295:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1295:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1281:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1344_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 113,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "portfolio",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1343,
                      "src": "1281:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1320:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "id": 115,
                      "isConstant": false,
                      "isInlineArray": true,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "1319:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint8_$1_memory_ptr",
                        "typeString": "uint8[1] memory"
                      }
                    },
                    "src": "1281:41:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "1281:41:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "026ff05e",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1107:2:0"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1117:0:0"
            },
            "scope": 120,
            "src": "1088:241:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 121,
        "src": "83:1248:0"
      }
    ],
    "src": "0:1332:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.2+commit.bacdbe57.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        "0xdb08a06eba245dbd34ffbd08b80e14e9acdd66a8ca6f8f1f035348ced6ef7dc7": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "_hash",
              "type": "string"
            }
          ],
          "name": "DataStoredInTheLog",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0x1762e6485dad7c291ae8191119acded92bd07cda85e738e1e570a5949d5a264b": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "userName",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "portfolio",
              "type": "uint256[]"
            }
          ],
          "name": "ReturnCreateUser",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        "0x4893c8577e724f997ce2a66eaa3376f5921e8c449711fa299dadf3dc2b688a98": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "AssetID",
              "type": "uint256"
            }
          ],
          "name": "returnAID",
          "type": "event"
        },
        "0x7bb34176ea5c54ad2400ab070d5ea84ffa3016a701e16082f71d4ff48d004f34": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "CertificateID",
              "type": "uint256"
            }
          ],
          "name": "returnCID",
          "type": "event"
        },
        "0xa323dbc7f3cc04e17c7c12b5263e160308382919b308390323d16caf0c3d5304": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "LicenseID",
              "type": "uint256"
            }
          ],
          "name": "returnLID",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xa6A3F18323b3e4228FbCbD3Ec9B23d9AB7Ed7Ec2",
      "transactionHash": "0xde40dab2e0cb02abbfffa20b33e627f655a3c0e66b1987e1cde5001649dc2f93"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2021-01-14T21:52:55.724Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}