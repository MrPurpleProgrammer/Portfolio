{
  "contractName": "Artisan",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "DataStoredInTheLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "portfolio",
          "type": "uint256[]"
        }
      ],
      "name": "ReturnCreateUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "AssetID",
          "type": "uint256"
        }
      ],
      "name": "returnAID",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "CertificateID",
          "type": "uint256"
        }
      ],
      "name": "returnCID",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "LicenseID",
          "type": "uint256"
        }
      ],
      "name": "returnLID",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "AssetIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CertificateIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LIDToCID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LicenseIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "storeDataAsLog",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "storeDataAsString",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "multiHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "multiHash_Function",
          "type": "bytes4"
        }
      ],
      "name": "storeDataAsStruct",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "multiHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4",
              "name": "multiHash_Function",
              "type": "bytes4"
            }
          ],
          "internalType": "struct IPFSEngine.IpfsHash",
          "name": "IpfsHashMemory",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        }
      ],
      "name": "updateUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"DataStoredInTheLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"portfolio\",\"type\":\"uint256[]\"}],\"name\":\"ReturnCreateUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AssetID\",\"type\":\"uint256\"}],\"name\":\"returnAID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CertificateID\",\"type\":\"uint256\"}],\"name\":\"returnCID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LicenseID\",\"type\":\"uint256\"}],\"name\":\"returnLID\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AssetIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CertificateIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LIDToCID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LicenseIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"storeDataAsLog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"storeDataAsString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"multiHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"multiHash_Function\",\"type\":\"bytes4\"}],\"name\":\"storeDataAsStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"multiHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"multiHash_Function\",\"type\":\"bytes4\"}],\"internalType\":\"struct IPFSEngine.IpfsHash\",\"name\":\"IpfsHashMemory\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"updateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"name()\":{\"details\":\"Gets the token name.\",\"returns\":{\"_0\":\"string representing the token name\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"returns\":{\"_0\":\"string representing the token symbol\"}},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a given token ID. May return an empty string.     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}).     * If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings.     * .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"token.uri/123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"\\\" | \\\"token.uri/<tokenId>\\\" |===     * Requirements:     * - `tokenId` must exist.\"},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract.\",\"returns\":{\"_0\":\"uint256 representing the total amount of tokens\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/MyData/Projects/Portfolio/contracts/Artisan.sol\":\"Artisan\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/MyData/Projects/Portfolio/contracts/Artisan.sol\":{\"keccak256\":\"0x156e97d6d26f9409d5e8a6acb4e0e1f2a4744cb53adbfe825272687aef6c1e5d\",\"urls\":[\"bzz-raw://60e538bf6662482dc4aa5470fd6452f6e4b878bef01ba5c8673ef0384f47d822\",\"dweb:/ipfs/QmQR3L5h5NYnyfb8k3hAdx4aaUQTeLVhkniJnTwMrcjpLH\"]},\"/C/MyData/Projects/Portfolio/contracts/IPFSEngine.sol\":{\"keccak256\":\"0xfc263b633cfe5d024a63301673d1086febee27d58b4ea6249ee17860ea386522\",\"urls\":[\"bzz-raw://47a404e75ce6d1830169977b08694f27d656af850e18b4fbd305e1c42dc371c5\",\"dweb:/ipfs/QmPDt6ZipQpDaek3YUXoP57ffJnPzysiuhpV5Si8Xcfkds\"]},\"/C/MyData/Projects/Portfolio/contracts/Models.sol\":{\"keccak256\":\"0x8ebef18290efd901bee7ffab817c62be030238527f23608fb190eb98335f6bb3\",\"urls\":[\"bzz-raw://0cdc6e1d9e5a7f19ab1b033accd3eccf7b6a7850c62dcc8f61964443cef42c9b\",\"dweb:/ipfs/QmcuTsQHy2tnLEuNSHQsHQdm5SrSfBb8RWZn8rKS5E6Cns\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0xc6fb4c940628ca2cde81ed6d20fc9ff456b60f55aafef555f43a86a2dda7ad9f\",\"urls\":[\"bzz-raw://f17dda58954a84ffca3d53c0b6435bad7f5c42ab3a9c4603db2f1aef00edae4e\",\"dweb:/ipfs/QmehW99QmmzKvnqTsprsApDF7mK2JVo6nnrZ47znhLTFjh\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"urls\":[\"bzz-raw://8f9f711fb8d0d92aeea1c327e3845d13ca1fa8f142e47f8723cd5b3106fb29a3\",\"dweb:/ipfs/QmVQUReDW9f4zGqhizwHnyU8EntMs95tbASdqkGncnikba\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xb046d18f9d09683ca1c0ed6d80c61da8a8a7d9b30bad70a17b898538683eff74\",\"urls\":[\"bzz-raw://4728713afa6ae36cc9e92c7107c796a313add3ec20f813be2cde76c814486b2a\",\"dweb:/ipfs/QmUJBTXvYaGDF5PVnd5pUvYerc9DRXvqANDzgCzAp3FkkA\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\",\"urls\":[\"bzz-raw://5127b264994adab88fae419b1c493efc5acd07134c19ee5c0397e50018291ebf\",\"dweb:/ipfs/QmWwJZVhvdmvUCdimbb6R2Jiu59zjPqm6XTMchM6LaEHAp\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x6d83564993be2f5220232315a362a2b256afb1956738e2ff67c403f0b118e213\",\"urls\":[\"bzz-raw://c137f3e19171d4d08e8102fbd540a03a9231d0370bc0dfa2a7ffc0eebfe78e22\",\"dweb:/ipfs/QmaQPiTV7PzBwNK7onx6zPnVZN1WngxxbTooRYh3JGeBSF\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xbff8693dd68117a7662eed35ce4deb60786bbd9d621f36f92edb1b86a4578182\",\"urls\":[\"bzz-raw://b80fc44dffeb5d1f478440165be3ffad365f1746c8fa309f2cc899769e482f42\",\"dweb:/ipfs/QmXCCXHKDD5DwiNwxtp482ruc5S95fxM1wWS5i6bELuEf4\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x3636662804cd8f474536b2875a9038a4c3fb91879f1bbff48af5c3f140fcd2f0\",\"urls\":[\"bzz-raw://9fab8521263fa581544000cb57335a3f2e6bcdfbb5579d3ceaa5acf741c67c4f\",\"dweb:/ipfs/QmZfXnMom7JSNtfyie5yGPN1SUC4SmHbz4ScVBH88URmA7\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xe7f984cedc00a138dc27f263c73c32ba9a4b2fd23b6c34ac46f46c074b943538\",\"urls\":[\"bzz-raw://0f4acda12f076fe7584921241ddbb5b460ca7cad6cb8a42252ac7f2a9f539127\",\"dweb:/ipfs/QmQmfhkEv9GrhdWe67QtXnU19AMuoEmy31QnHPkucdYLjZ\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xe82364f234aa24f04c66bef6f7a54b8370131eea1d28298c1dc61083b37a8d12\",\"urls\":[\"bzz-raw://30e1ba760bc71d7c0174d36526f414746841e050e251ec8ddd6ae39eddaeed7b\",\"dweb:/ipfs/QmUDP2GYtx482gcdd9iUUTnfcyh3R6haU5N7mWRh8XjXv2\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x934dbc549a8df514456047ad1c6ab257127a03f4109272834c30e596bbe10d1d\",\"urls\":[\"bzz-raw://33cf247ade00a28c632dfe2c2521e1952f467c6081b89375c34b1eb297441d9b\",\"dweb:/ipfs/QmYGNAHCtN1m3QDynteTeVCfwFZBZRpGJNMjxwVBUifnfB\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"keccak256\":\"0x244e4b74b17716120cf28e58636f11c699b8c0c94628bd952a95cee038d7e32b\",\"urls\":[\"bzz-raw://198d566157120c526bd6b5086b32cae85a11389b8a538f533ba9f9447915da0e\",\"dweb:/ipfs/QmeE6d8KWERx7f1FVS5tMnitNJxBm2yWXRSEUBF7R6voLh\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"urls\":[\"bzz-raw://8651649cf0b9efa18c3b01c030276fa320d41adbdc286833417e7f36e357b2f3\",\"dweb:/ipfs/QmafhM2Nd1aP43QVB1eRRZaqRXQKswNfQcWi8U8xjrxCfN\"]},\"/C/MyData/Projects/Portfolio/node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x79484115dbfa737054f73e041009a02eeb434dd81be5d684bf4255ad3b5ab558\",\"urls\":[\"bzz-raw://12c119699463450c2544f5b9d8709b5e9e9164c62948a79c3ec53423a051d969\",\"dweb:/ipfs/QmPJduzSAaekq447QeFqAp3E7dc8CnNk5ajofckJ4ahA7Q\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80636352211e11610104578063a52361d0116100a2578063d168614011610071578063d1686140146103cc578063e985e9c5146103df578063f2fde38b146103f2578063fd7d4c0e14610405576101da565b8063a52361d014610373578063b88d4fde14610393578063c87b56dd146103a6578063cfd56b19146103b9576101da565b8063715018a6116100de578063715018a6146103485780638da5cb5b1461035057806395d89b4114610358578063a22cb46514610360576101da565b80636352211e1461031a5780636c0360eb1461032d57806370a0823114610335576101da565b806323b872dd1161017c5780634e325ed31161014b5780634e325ed3146102ce5780634f6ccce7146102e1578063507ffba5146102f45780635d3ea9c914610307576101da565b806323b872dd146102825780632f745c591461029557806333242a19146102a857806342842e0e146102bb576101da565b8063081812fc116101b8578063081812fc14610227578063095ea7b3146102475780630b4f12f61461025a57806318160ddd1461026d576101da565b806301ffc9a7146101df578063026ff05e1461020857806306fdde0314610212575b600080fd5b6101f26101ed36600461191d565b610418565b6040516101ff9190611ba9565b60405180910390f35b61021061043b565b005b61021a6104b1565b6040516101ff9190611bb4565b61023a610235366004611988565b610548565b6040516101ff9190611aa6565b6102106102553660046118cf565b610594565b610210610268366004611955565b61062c565b61027561068b565b6040516101ff9190612081565b6102106102903660046117ec565b61069c565b6102756102a33660046118cf565b6106d4565b6102106102b6366004611955565b610705565b6102106102c93660046117ec565b61073f565b6102756102dc366004611988565b61075a565b6102756102ef366004611988565b610778565b610210610302366004611955565b610794565b610275610315366004611988565b6108a5565b61023a610328366004611988565b6108b7565b61021a6108e5565b61027561034336600461179d565b610946565b61021061098f565b61023a610a0e565b61021a610a1d565b61021061036e366004611894565b610a7e565b6103866103813660046118f9565b610b4c565b6040516101ff9190612060565b6102106103a136600461182c565b610b69565b61021a6103b4366004611988565b610ba8565b6102106103c7366004611955565b610cf2565b6102756103da366004611988565b610d05565b6101f26103ed3660046117b8565b610d12565b61021061040036600461179d565b610d40565b610275610413366004611988565b610df7565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b336000818152601a6020818152604080842080546001600160a01b031916815581518084019283905285815295909452919052915161048092600190920191906115df565b5060408051602080820183526000808352338152601a909152919091206104ae91600290910190600161165d565b50565b60068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b505050505090505b90565b600061055382610e04565b6105785760405162461bcd60e51b815260040161056f90611e51565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061059f826108b7565b9050806001600160a01b0316836001600160a01b031614156105d35760405162461bcd60e51b815260040161056f90611f6a565b806001600160a01b03166105e5610e17565b6001600160a01b031614806106015750610601816103ed610e17565b61061d5760405162461bcd60e51b815260040161056f90611d68565b6106278383610e1b565b505050565b336000908152601a60205260409020546001600160a01b03166106615760405162461bcd60e51b815260040161056f90611fab565b336000908152601a602090815260409091208251610687926001909201918401906115df565b5050565b60006106976002610e89565b905090565b6106ad6106a7610e17565b82610e94565b6106c95760405162461bcd60e51b815260040161056f90611fd8565b610627838383610f19565b6001600160a01b03821660009081526001602052604081206106fc908363ffffffff61103916565b90505b92915050565b7fdb08a06eba245dbd34ffbd08b80e14e9acdd66a8ca6f8f1f035348ced6ef7dc7816040516107349190611bb4565b60405180910390a150565b61062783838360405180602001604052806000815250610b69565b600d818154811061076757fe5b600091825260209091200154905081565b60008061078c60028463ffffffff61104516565b509392505050565b336000908152601a60205260409020546001600160a01b0316156107ca5760405162461bcd60e51b815260040161056f90612029565b6040805160608101825233808252602080830185815284516000808252818401875285870191909152928352601a825293909120825181546001600160a01b0319166001600160a01b039091161781559251805192939261083192600185019201906115df565b506040820151805161084d91600284019160209091019061169d565b5050336000908152601a602052604090819020805491517f1762e6485dad7c291ae8191119acded92bd07cda85e738e1e570a5949d5a264b9350610734926001600160a01b0316916001810191600290910190611af7565b60176020526000908152604090205481565b60006106ff826040518060600160405280602981526020016120ee602991396002919063ffffffff61106116565b60098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561053d5780601f106105125761010080835404028352916020019161053d565b60006001600160a01b03821661096e5760405162461bcd60e51b815260040161056f90611dc5565b6001600160a01b03821660009081526001602052604090206106ff90610e89565b610997610e17565b600a546001600160a01b039081169116146109c45760405162461bcd60e51b815260040161056f90611e9d565b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b600a546001600160a01b031690565b60078054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561053d5780601f106105125761010080835404028352916020019161053d565b610a86610e17565b6001600160a01b0316826001600160a01b03161415610ab75760405162461bcd60e51b815260040161056f90611ce5565b8060056000610ac4610e17565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610b08610e17565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b409190611ba9565b60405180910390a35050565b610b546116d7565b9182526001600160e01b031916602082015290565b610b7a610b74610e17565b83610e94565b610b965760405162461bcd60e51b815260040161056f90611fd8565b610ba284848484611078565b50505050565b6060610bb382610e04565b610bcf5760405162461bcd60e51b815260040161056f90611f1b565b60008281526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610c645780601f10610c3957610100808354040283529160200191610c64565b820191906000526020600020905b815481529060010190602001808311610c4757829003601f168201915b505060095493945050505060026000196101006001841615020190911604610c8d579050610436565b805115610cbf57600981604051602001610ca8929190611a25565b604051602081830303815290604052915050610436565b6009610cca846110ab565b604051602001610cdb929190611a25565b604051602081830303815290604052915050919050565b805161068790600b9060208401906115df565b600e818154811061076757fe5b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610d48610e17565b600a546001600160a01b03908116911614610d755760405162461bcd60e51b815260040161056f90611e9d565b6001600160a01b038116610d9b5760405162461bcd60e51b815260040161056f90611c5b565b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600c818154811061076757fe5b60006106ff60028363ffffffff61116f16565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e50826108b7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006106ff8261117b565b6000610e9f82610e04565b610ebb5760405162461bcd60e51b815260040161056f90611d1c565b6000610ec6836108b7565b9050806001600160a01b0316846001600160a01b03161480610f015750836001600160a01b0316610ef684610548565b6001600160a01b0316145b80610f115750610f118185610d12565b949350505050565b826001600160a01b0316610f2c826108b7565b6001600160a01b031614610f525760405162461bcd60e51b815260040161056f90611ed2565b6001600160a01b038216610f785760405162461bcd60e51b815260040161056f90611ca1565b610f83838383610627565b610f8e600082610e1b565b6001600160a01b0383166000908152600160205260409020610fb6908263ffffffff61117f16565b506001600160a01b0382166000908152600160205260409020610fdf908263ffffffff61118b16565b50610ff26002828463ffffffff61119716565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006106fc83836111ad565b600080808061105486866111f2565b9097909650945050505050565b600061106e84848461124e565b90505b9392505050565b611083848484610f19565b61108f848484846112ad565b610ba25760405162461bcd60e51b815260040161056f90611c09565b6060816110d057506040805180820190915260018152600360fc1b6020820152610436565b8160005b81156110e857600101600a820491506110d4565b6060816040519080825280601f01601f191660200182016040528015611115576020820181803883390190505b50859350905060001982015b831561116657600a840660300160f81b8282806001900393508151811061114457fe5b60200101906001600160f81b031916908160001a905350600a84049350611121565b50949350505050565b60006106fc83836113e7565b5490565b60006106fc83836113ff565b60006106fc83836114c5565b600061106e84846001600160a01b03851661150f565b815460009082106111d05760405162461bcd60e51b815260040161056f90611bc7565b8260000182815481106111df57fe5b9060005260206000200154905092915050565b8154600090819083106112175760405162461bcd60e51b815260040161056f90611e0f565b600084600001848154811061122857fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000828152600184016020526040812054828161127e5760405162461bcd60e51b815260040161056f9190611bb4565b5084600001600182038154811061129157fe5b9060005260206000209060020201600101549150509392505050565b60006112c1846001600160a01b03166115a6565b6112cd57506001610f11565b600060606001600160a01b038616630a85bd0160e11b6112eb610e17565b8988886040516024016113019493929190611aba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161133f9190611a09565b6000604051808303816000865af19150503d806000811461137c576040519150601f19603f3d011682016040523d82523d6000602084013e611381565b606091505b5091509150816113b35780511561139b5780518082602001fd5b60405162461bcd60e51b815260040161056f90611c09565b6000818060200190516113c99190810190611939565b6001600160e01b031916630a85bd0160e11b149350610f1192505050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156114bb578354600019808301919081019060009087908390811061143257fe5b906000526020600020015490508087600001848154811061144f57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061147f57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506106ff565b60009150506106ff565b60006114d183836113e7565b611507575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106ff565b5060006106ff565b600082815260018401602052604081205480611574575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611071565b8285600001600183038154811061158757fe5b9060005260206000209060020201600101819055506000915050611071565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610f11575050151592915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061162057805160ff191683800117855561164d565b8280016001018555821561164d579182015b8281111561164d578251825591602001919060010190611632565b506116599291506116ee565b5090565b82805482825590600052602060002090810192821561164d579160200282015b8281111561164d578251829060ff1690559160200191906001019061167d565b82805482825590600052602060002090810192821561164d579160200282018281111561164d578251825591602001919060010190611632565b604080518082019091526000808252602082015290565b61054591905b8082111561165957600081556001016116f4565b80356001600160a01b03811681146106ff57600080fd5b600082601f83011261172f578081fd5b813567ffffffffffffffff80821115611746578283fd5b604051601f8301601f191681016020018281118282101715611766578485fd5b60405282815292508284830160200186101561178157600080fd5b8260208601602083013760006020848301015250505092915050565b6000602082840312156117ae578081fd5b6106fc8383611708565b600080604083850312156117ca578081fd5b6117d48484611708565b91506117e38460208501611708565b90509250929050565b600080600060608486031215611800578081fd5b833561180b816120c2565b9250602084013561181b816120c2565b929592945050506040919091013590565b60008060008060808587031215611841578081fd5b61184b8686611708565b935061185a8660208701611708565b925060408501359150606085013567ffffffffffffffff81111561187c578182fd5b6118888782880161171f565b91505092959194509250565b600080604083850312156118a6578182fd5b6118b08484611708565b9150602083013580151581146118c4578182fd5b809150509250929050565b600080604083850312156118e1578182fd5b6118eb8484611708565b946020939093013593505050565b6000806040838503121561190b578182fd5b8235915060208301356118c4816120d7565b60006020828403121561192e578081fd5b8135611071816120d7565b60006020828403121561194a578081fd5b8151611071816120d7565b600060208284031215611966578081fd5b813567ffffffffffffffff81111561197c578182fd5b610f118482850161171f565b600060208284031215611999578081fd5b5035919050565b6000815480845260208085019450838352808320835b838110156119d2578154875295820195600191820191016119b6565b509495945050505050565b600081518084526119f5816020860160208601612096565b601f01601f19169290920160200192915050565b60008251611a1b818460208701612096565b9190910192915050565b6000808454600180821660008114611a445760018114611a5b57611a8a565b60ff198316865260028304607f1686019350611a8a565b600283048886526020808720875b83811015611a825781548a820152908501908201611a69565b505050860193505b5050508351611a9d818360208801612096565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611aed908301846119dd565b9695505050505050565b60006060820160018060a01b03861683526020606081850152828654600180821660008114611b2d5760018114611b4d57611b88565b611b3d607f600285041687612081565b60ff198416815285019350611b88565b60028304611b5b8188612081565b611b648c61208a565b895b83811015611b7f57815483820152908501908801611b66565b91909101955050505b5050508481036040860152611b9d81876119a0565b98975050505050505050565b901515815260200190565b6000602082526106fc60208301846119dd565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b602080825260139082015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526018908201527f54686973205573657220616c7265616479206578697374730000000000000000604082015260600190565b815181526020918201516001600160e01b0319169181019190915260400190565b90815260200190565b60009081526020902090565b60005b838110156120b1578181015183820152602001612099565b83811115610ba25750506000910152565b6001600160a01b03811681146104ae57600080fd5b6001600160e01b0319811681146104ae57600080fdfe4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea2646970667358221220f73ca8b0559fa155a9778c70229817f3b715a3e2854e41e7d5465eae733df6bd64736f6c63430006020033",
  "sourceMap": "1488:2:5:-:0;1461:29;;1526:11;1496:41;;;;1543:35;;1606:19;1584:41;;1653:19;1631:41;;3452:365:11;83:1249:0;3452:365:11;;;;;;;83:1249:0;3452:365:11;;;;;;-1:-1:-1;;;3452:365:11;;751:40:8;-1:-1:-1;;;;;;;;751:18:8;:40;:::i;:::-;3524:12:11;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;3546:16:11;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;3650:40:11;-1:-1:-1;;;;;;;;3650:18:11;:40;:::i;:::-;3700:49;-1:-1:-1;;;;;;;;3700:18:11;:49;:::i;:::-;3759:51;-1:-1:-1;;;;;;;;3759:18:11;:51;:::i;:::-;-1:-1:-1;865:17:7;;-1:-1:-1;885:12:7;-1:-1:-1;;;;;885:10:7;:12;:::i;:::-;907:6;:18;;-1:-1:-1;;;;;;907:18:7;-1:-1:-1;;;;;907:18:7;;;;;;;;940:43;;907:18;;-1:-1:-1;907:18:7;-1:-1:-1;;940:43:7;;-1:-1:-1;;940:43:7;831:159;83:1249:0;;1482:198:8;-1:-1:-1;;;;;;1565:25:8;;;;;1557:66;;;;-1:-1:-1;;;1557:66:8;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1633:33:8;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1633:40:8;1669:4;1633:40;;;1482:198::o;768:104:6:-;855:10;768:104;;:::o;83:1249:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;83:1249:0;;;-1:-1:-1;83:1249:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;342:407:-1;533:2;547:47;;;230:2;518:18;;;860:19;266:30;900:14;;;246:51;316:12;;;504:245;;83:1249:0;;;;;;",
  "deployedSourceMap": "83:1249:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;83:1249:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;948:140:8;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1089:241:0;;;:::i;:::-;;4723:90:11;;;:::i;:::-;;;;;;;;9383:209;;;;;;;;;:::i;:::-;;;;;;;;8717:381;;;;;;;;;:::i;795:288:0:-;;;;;;;;;:::i;7597:200:11:-;;;:::i;:::-;;;;;;;;11094:300;;;;;;;;;:::i;7292:152::-;;;;;;;;;:::i;625:101:3:-;;;;;;;;;:::i;12043:149:11:-;;;;;;;;;:::i;656:27:5:-;;;;;;;;;:::i;8135:161:11:-;;;;;;;;;:::i;234:555:0:-;;;;;;;;;:::i;1836:43:5:-;;;;;;;;;:::i;4451:167:11:-;;;;;;;;;:::i;6831:87::-;;;:::i;4021:211::-;;;;;;;;;:::i;1689:145:7:-;;;:::i;1066:77::-;;;:::i;4922:94:11:-;;;:::i;9891:290::-;;;;;;;;;:::i;299:271:3:-;;;;;;;;;:::i;:::-;;;;;;;;12915:282:11;;;;;;;;;:::i;5859:740::-;;;;;;;;;:::i;205:86:3:-;;;;;;;;;:::i;689:25:5:-;;;;;;;;;:::i;10503:154:11:-;;;;;;;;;:::i;1983:240:7:-;;;;;;;;;:::i;619:31:5:-;;;;;;;;;:::i;948:140:8:-;-1:-1:-1;;;;;;1048:33:8;;1025:4;1048:33;;;;;;;;;;;;;948:140;;;;:::o;1089:241:0:-;1142:10;1181:42;1128:25;;;:13;:25;;;;;;;;:95;;-1:-1:-1;;;;;;1128:95:0;;;1233:39;;;;;;;;;;;;:25;;;;;;;:39;;;;1128:95;1233:34;;;;:39;;:::i;:::-;-1:-1:-1;1282:41:0;;;;;;;;;-1:-1:-1;1282:41:0;;;1296:10;1282:25;;:13;:25;;;;;;;:41;;:35;;;;;:41;;:::i;:::-;;1089:241::o;4723:90:11:-;4801:5;4794:12;;;;;;;;-1:-1:-1;;4794:12:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4769:13;;4794:12;;4801:5;;4794:12;;4801:5;4794:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4723:90;;:::o;9383:209::-;9451:7;9478:16;9486:7;9478;:16::i;:::-;9470:73;;;;-1:-1:-1;;;9470:73:11;;;;;;;;;;;;;;;;;-1:-1:-1;9561:24:11;;;;:15;:24;;;;;;-1:-1:-1;;;;;9561:24:11;;9383:209::o;8717:381::-;8797:13;8813:16;8821:7;8813;:16::i;:::-;8797:32;;8853:5;-1:-1:-1;;;;;8847:11:11;:2;-1:-1:-1;;;;;8847:11:11;;;8839:57;;;;-1:-1:-1;;;8839:57:11;;;;;;;;;8931:5;-1:-1:-1;;;;;8915:21:11;:12;:10;:12::i;:::-;-1:-1:-1;;;;;8915:21:11;;:62;;;;8940:37;8957:5;8964:12;:10;:12::i;8940:37::-;8907:152;;;;-1:-1:-1;;;8907:152:11;;;;;;;;;9070:21;9079:2;9083:7;9070:8;:21::i;:::-;8717:381;;;:::o;795:288:0:-;891:10;877:25;;;;:13;:25;;;;;:37;-1:-1:-1;;;;;877:37:0;856:165;;;;-1:-1:-1;;;856:165:0;;;;;;;;;1045:10;1031:25;;;;:13;:25;;;;;;;;:45;;;;:34;;;;;:45;;;;:::i;:::-;;795:288;:::o;7597:200:11:-;7650:7;7769:21;:12;:19;:21::i;:::-;7762:28;;7597:200;:::o;11094:300::-;11253:41;11272:12;:10;:12::i;:::-;11286:7;11253:18;:41::i;:::-;11245:103;;;;-1:-1:-1;;;11245:103:11;;;;;;;;;11359:28;11369:4;11375:2;11379:7;11359:9;:28::i;7292:152::-;-1:-1:-1;;;;;7407:20:11;;7381:7;7407:20;;;:13;:20;;;;;:30;;7431:5;7407:30;:23;:30;:::i;:::-;7400:37;;7292:152;;;;;:::o;625:101:3:-;693:25;712:5;693:25;;;;;;;;;;;;;;;625:101;:::o;12043:149:11:-;12146:39;12163:4;12169:2;12173:7;12146:39;;;;;;;;;;;;:16;:39::i;656:27:5:-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;656:27:5;:::o;8135:161:11:-;8202:7;;8243:22;:12;8259:5;8243:22;:15;:22;:::i;:::-;-1:-1:-1;8221:44:11;8135:161;-1:-1:-1;;;8135:161:11:o;234:555:0:-;330:10;316:25;;;;:13;:25;;;;;:37;-1:-1:-1;;;;;316:37:0;:99;295:170;;;;-1:-1:-1;;;295:170:0;;;;;;;;;503:90;;;;;;;;521:10;503:90;;;;;;;;;;567:16;;-1:-1:-1;567:16:0;;;;;;;;503:90;;;;;;;475:25;;;:13;:25;;;;;;:118;;;;-1:-1:-1;;;;;;475:118:0;-1:-1:-1;;;;;475:118:0;;;;;;;;;;503:90;;475:25;:118;;-1:-1:-1;475:118:0;;;;;;:::i;:::-;-1:-1:-1;475:118:0;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;652:10:0;638:25;;;;:13;:25;;;;;;;:37;;608:174;;;;-1:-1:-1;608:174:0;;-1:-1:-1;;;;;638:37:0;;;689:34;;;737:35;;;;;608:174;;1836:43:5;;;;;;;;;;;;;:::o;4451:167:11:-;4515:7;4541:70;4558:7;4541:70;;;;;;;;;;;;;;;;;:12;;:70;;:16;:70;:::i;6831:87::-;6903:8;6896:15;;;;;;;;-1:-1:-1;;6896:15:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6871:13;;6896:15;;6903:8;;6896:15;;6903:8;6896:15;;;;;;;;;;;;;;;;;;;;;;;;4021:211;4085:7;-1:-1:-1;;;;;4112:19:11;;4104:74;;;;-1:-1:-1;;;4104:74:11;;;;;;;;;-1:-1:-1;;;;;4196:20:11;;;;;;:13;:20;;;;;:29;;:27;:29::i;1689:145:7:-;1280:12;:10;:12::i;:::-;1270:6;;-1:-1:-1;;;;;1270:6:7;;;:22;;;1262:67;;;;-1:-1:-1;;;1262:67:7;;;;;;;;;1779:6:::1;::::0;1758:40:::1;::::0;1795:1:::1;::::0;-1:-1:-1;;;;;1779:6:7::1;::::0;1758:40:::1;::::0;1795:1;;1758:40:::1;1808:6;:19:::0;;-1:-1:-1;;;;;;1808:19:7::1;::::0;;1689:145::o;1066:77::-;1130:6;;-1:-1:-1;;;;;1130:6:7;1066:77;:::o;4922:94:11:-;5002:7;4995:14;;;;;;;;-1:-1:-1;;4995:14:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4970:13;;4995:14;;5002:7;;4995:14;;5002:7;4995:14;;;;;;;;;;;;;;;;;;;;;;;;9891:290;10005:12;:10;:12::i;:::-;-1:-1:-1;;;;;9993:24:11;:8;-1:-1:-1;;;;;9993:24:11;;;9985:62;;;;-1:-1:-1;;;9985:62:11;;;;;;;;;10103:8;10058:18;:32;10077:12;:10;:12::i;:::-;-1:-1:-1;;;;;10058:32:11;;;;;;;;;;;;;;;;;-1:-1:-1;10058:32:11;;;:42;;;;;;;;;;;;:53;;-1:-1:-1;;10058:53:11;;;;;;;;;;;10141:12;:10;:12::i;:::-;-1:-1:-1;;;;;10126:48:11;;10165:8;10126:48;;;;;;;;;;;;;;;9891:290;;:::o;299:271:3:-;418:30;;:::i;:::-;461:36;;;-1:-1:-1;;;;;;508:54:3;:33;;;:54;461:14;299:271::o;12915:282:11:-;13046:41;13065:12;:10;:12::i;:::-;13079:7;13046:18;:41::i;:::-;13038:103;;;;-1:-1:-1;;;13038:103:11;;;;;;;;;13151:39;13165:4;13171:2;13175:7;13184:5;13151:13;:39::i;:::-;12915:282;;;;:::o;5859:740::-;5924:13;5957:16;5965:7;5957;:16::i;:::-;5949:76;;;;-1:-1:-1;;;5949:76:11;;;;;;;;;6062:19;;;;:10;:19;;;;;;;;;6036:45;;;;;;-1:-1:-1;;6036:45:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;;:45;;;6062:19;6036:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6160:8:11;6154:22;6036:45;;-1:-1:-1;;;;6154:22:11;-1:-1:-1;;6154:22:11;;;;;;;;;;;6150:74;;6204:9;-1:-1:-1;6197:16:11;;6150:74;6326:23;;:27;6322:110;;6400:8;6410:9;6383:37;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6383:37:11;;;6369:52;;;;;6322:110;6562:8;6572:18;:7;:16;:18::i;:::-;6545:46;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6545:46:11;;;6531:61;;;5859:740;;;:::o;205:86:3:-;271:12;;;;:4;;:12;;;;;:::i;689:25:5:-;;;;;;;;;;10503:154:11;-1:-1:-1;;;;;10615:25:11;;;10592:4;10615:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;10503:154::o;1983:240:7:-;1280:12;:10;:12::i;:::-;1270:6;;-1:-1:-1;;;;;1270:6:7;;;:22;;;1262:67;;;;-1:-1:-1;;;1262:67:7;;;;;;;;;-1:-1:-1;;;;;2071:22:7;::::1;2063:73;;;;-1:-1:-1::0;;;2063:73:7::1;;;;;;;;;2172:6;::::0;2151:38:::1;::::0;-1:-1:-1;;;;;2151:38:7;;::::1;::::0;2172:6:::1;::::0;2151:38:::1;::::0;2172:6:::1;::::0;2151:38:::1;2199:6;:17:::0;;-1:-1:-1;;;;;;2199:17:7::1;-1:-1:-1::0;;;;;2199:17:7;;;::::1;::::0;;;::::1;::::0;;1983:240::o;619:31:5:-;;;;;;;;;;14366:117:11;14423:4;14446:30;:12;14468:7;14446:30;:21;:30;:::i;768:104:6:-;855:10;768:104;:::o;21390:155:11:-;21455:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;21455:29:11;-1:-1:-1;;;;;21455:29:11;;;;;;;;:24;;21508:16;21455:24;21508:7;:16::i;:::-;-1:-1:-1;;;;;21499:39:11;;;;;;;;;;;21390:155;;:::o;7023:121:17:-;7092:7;7118:19;7126:3;7118:7;:19::i;14844:329:11:-;14929:4;14953:16;14961:7;14953;:16::i;:::-;14945:73;;;;-1:-1:-1;;;14945:73:11;;;;;;;;;15028:13;15044:16;15052:7;15044;:16::i;:::-;15028:32;;15089:5;-1:-1:-1;;;;;15078:16:11;:7;-1:-1:-1;;;;;15078:16:11;;:51;;;;15122:7;-1:-1:-1;;;;;15098:31:11;:20;15110:7;15098:11;:20::i;:::-;-1:-1:-1;;;;;15098:31:11;;15078:51;:87;;;;15133:32;15150:5;15157:7;15133:16;:32::i;:::-;15070:96;14844:329;-1:-1:-1;;;;14844:329:11:o;18356:559::-;18473:4;-1:-1:-1;;;;;18453:24:11;:16;18461:7;18453;:16::i;:::-;-1:-1:-1;;;;;18453:24:11;;18445:78;;;;-1:-1:-1;;;18445:78:11;;;;;;;;;-1:-1:-1;;;;;18541:16:11;;18533:65;;;;-1:-1:-1;;;18533:65:11;;;;;;;;;18609:39;18630:4;18636:2;18640:7;18609:20;:39::i;:::-;18710:29;18727:1;18731:7;18710:8;:29::i;:::-;-1:-1:-1;;;;;18750:19:11;;;;;;:13;:19;;;;;:35;;18777:7;18750:35;:26;:35;:::i;:::-;-1:-1:-1;;;;;;18795:17:11;;;;;;:13;:17;;;;;:30;;18817:7;18795:30;:21;:30;:::i;:::-;-1:-1:-1;18836:29:11;:12;18853:7;18862:2;18836:29;:16;:29;:::i;:::-;;18900:7;18896:2;-1:-1:-1;;;;;18881:27:11;18890:4;-1:-1:-1;;;;;18881:27:11;;;;;;;;;;;18356:559;;;:::o;7649:135:18:-;7720:7;7754:22;7758:3;7770:5;7754:3;:22::i;7472:224:17:-;7552:7;;;;7611:22;7615:3;7627:5;7611:3;:22::i;:::-;7580:53;;;;-1:-1:-1;7472:224:17;-1:-1:-1;;;;;7472:224:17:o;8115:202::-;8222:7;8264:44;8269:3;8289;8295:12;8264:4;:44::i;:::-;8256:53;-1:-1:-1;8115:202:17;;;;;;:::o;13902:269:11:-;14015:28;14025:4;14031:2;14035:7;14015:9;:28::i;:::-;14061:48;14084:4;14090:2;14094:7;14103:5;14061:22;:48::i;:::-;14053:111;;;;-1:-1:-1;;;14053:111:11;;;;;;;;202:723:19;258:13;475:10;471:51;;-1:-1:-1;501:10:19;;;;;;;;;;;;-1:-1:-1;;;501:10:19;;;;;;471:51;546:5;531:12;585:75;592:9;;585:75;;617:8;;647:2;639:10;;;;585:75;;;669:19;701:6;691:17;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;104:10;691:17:19;87:34:-1;135:17;;-1:-1;691:17:19;-1:-1:-1;761:5:19;;-1:-1:-1;669:39:19;-1:-1:-1;;;734:10:19;;776:112;783:9;;776:112;;849:2;842:4;:9;837:2;:14;826:27;;808:6;815:7;;;;;;;808:15;;;;;;;;;;;:45;-1:-1:-1;;;;;808:45:19;;;;;;;;-1:-1:-1;875:2:19;867:10;;;;776:112;;;-1:-1:-1;911:6:19;202:723;-1:-1:-1;;;;202:723:19:o;6791:149:17:-;6875:4;6898:35;6908:3;6928;6898:9;:35::i;4483:108::-;4565:19;;4483:108::o;6764:135:18:-;6834:4;6857:35;6865:3;6885:5;6857:7;:35::i;6467:129::-;6534:4;6557:32;6562:3;6582:5;6557:4;:32::i;6239:174:17:-;6328:4;6351:55;6356:3;6376;-1:-1:-1;;;;;6390:14:17;;6351:4;:55::i;4423:201:18:-;4517:18;;4490:7;;4517:26;-1:-1:-1;4509:73:18;;;;-1:-1:-1;;;4509:73:18;;;;;;;;;4599:3;:11;;4611:5;4599:18;;;;;;;;;;;;;;;;4592:25;;4423:201;;;;:::o;4934:274:17:-;5037:19;;5001:7;;;;5037:27;-1:-1:-1;5029:74:17;;;;-1:-1:-1;;;5029:74:17;;;;;;;;;5114:22;5139:3;:12;;5152:5;5139:19;;;;;;;;;;;;;;;;;;5114:44;;5176:5;:10;;;5188:5;:12;;;5168:33;;;;;4934:274;;;;;:::o;5615:315::-;5709:7;5747:17;;;:12;;;:17;;;;;;5797:12;5782:13;5774:36;;;;-1:-1:-1;;;5774:36:17;;;;;;;;;;;5863:3;:12;;5887:1;5876:8;:12;5863:26;;;;;;;;;;;;;;;;;;:33;;;5856:40;;;5615:315;;;;;:::o;20334:1050:11:-;20454:4;20479:15;:2;-1:-1:-1;;;;;20479:13:11;;:15::i;:::-;20474:58;;-1:-1:-1;20517:4:11;20510:11;;20474:58;20601:12;20615:23;-1:-1:-1;;;;;20642:7:11;;-1:-1:-1;;;20745:12:11;:10;:12::i;:::-;20771:4;20789:7;20810:5;20650:175;;;;;;;;;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;20650:175:11;;;49:4:-1;25:18;;61:17;;-1:-1;;;;;182:15;-1:-1;;;;;;20650:175:11;;;179:29:-1;;;;160:49;;;20642:184:11;;;;20650:175;20642:184;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;20600:226:11;;;;20841:7;20836:542;;20868:17;;:21;20864:376;;21033:10;21027:17;21093:15;21080:10;21076:2;21072:19;21065:44;20982:145;21165:60;;-1:-1:-1;;;21165:60:11;;;;;;;;20836:542;21270:13;21297:10;21286:32;;;;;;;;;;;;;;-1:-1:-1;;;;;;21340:26:11;-1:-1:-1;;;21340:26:11;;-1:-1:-1;21332:35:11;;-1:-1:-1;;;21332:35:11;4270:123:17;4341:4;4364:17;;;:12;;;;;:17;;;;;;:22;;;4270:123::o;2183:1512:18:-;2249:4;2386:19;;;:12;;;:19;;;;;;2420:15;;2416:1273;;2849:18;;-1:-1:-1;;2801:14:18;;;;2849:22;;;;2777:21;;2849:3;;:22;;3131;;;;;;;;;;;;;;3111:42;;3274:9;3245:3;:11;;3257:13;3245:26;;;;;;;;;;;;;;;;;;;:38;;;;3349:23;;;3391:1;3349:12;;;:23;;;;;;3375:17;;;3349:43;;3498:17;;3349:3;;3498:17;;;;;;;;;;;;;;;;;;;;;;3590:3;:12;;:19;3603:5;3590:19;;;;;;;;;;;3583:26;;;3631:4;3624:11;;;;;;;;2416:1273;3673:5;3666:12;;;;;1611:404;1674:4;1695:21;1705:3;1710:5;1695:9;:21::i;:::-;1690:319;;-1:-1:-1;27:10;;39:1;23:18;;;45:23;;1732:11:18;:23;;;;;;;;;;;;;1912:18;;1890:19;;;:12;;;:19;;;;;;:40;;;;1944:11;;1690:319;-1:-1:-1;1993:5:18;1986:12;;1828:678:17;1904:4;2037:17;;;:12;;;:17;;;;;;2069:13;2065:435;;-1:-1:-1;;2153:38:17;;;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;2135:12:17;:57;;;;;;;;;;;;;;;;;;;;;;;;2347:19;;2327:17;;;:12;;;:17;;;;;;;:39;2380:11;;2065:435;2458:5;2422:3;:12;;2446:1;2435:8;:12;2422:26;;;;;;;;;;;;;;;;;;:33;;:41;;;;2484:5;2477:12;;;;;718:610:16;778:4;1239:20;;1084:66;1278:23;;;;;;:42;;-1:-1:-1;;1305:15:16;;;1270:51;-1:-1:-1;;718:610:16:o;83:1249:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;83:1249:0;;;-1:-1:-1;83:1249:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;83:1249:0;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;5:130:-1;72:20;;-1:-1;;;;;31351:54;;32514:35;;32504:2;;32563:1;;32553:12;685:440;;786:3;779:4;771:6;767:17;763:27;753:2;;-1:-1;;794:12;753:2;841:6;828:20;28458:18;;28450:6;28447:30;28444:2;;;-1:-1;;28480:12;28444:2;28114;28108:9;28553;28534:17;;-1:-1;;28530:33;28140:17;;28621:4;28140:17;28200:34;;;28236:22;;;28197:62;28194:2;;;-1:-1;;28262:12;28194:2;28114;28281:22;933:21;;;854:73;-1:-1;854:73;1033:16;;;28621:4;1033:16;1030:25;-1:-1;1027:2;;;1068:1;;1058:12;1027:2;31578:6;28621:4;975:6;971:17;28621:4;1009:5;1005:16;31555:30;31634:1;28621:4;31625:6;1009:5;31616:16;;31609:27;;;;746:379;;;;;1721:241;;1825:2;1813:9;1804:7;1800:23;1796:32;1793:2;;;-1:-1;;1831:12;1793:2;1893:53;1938:7;1914:22;1893:53;;1969:366;;;2090:2;2078:9;2069:7;2065:23;2061:32;2058:2;;;-1:-1;;2096:12;2058:2;2158:53;2203:7;2179:22;2158:53;;;2148:63;;2266:53;2311:7;2248:2;2291:9;2287:22;2266:53;;;2256:63;;2052:283;;;;;;2342:491;;;;2480:2;2468:9;2459:7;2455:23;2451:32;2448:2;;;-1:-1;;2486:12;2448:2;85:6;72:20;97:33;124:5;97:33;;;2538:63;-1:-1;2638:2;2677:22;;72:20;97:33;72:20;97:33;;;2442:391;;2646:63;;-1:-1;;;2746:2;2785:22;;;;1651:20;;2442:391;2840:721;;;;;3004:3;2992:9;2983:7;2979:23;2975:33;2972:2;;;-1:-1;;3011:12;2972:2;3073:53;3118:7;3094:22;3073:53;;;3063:63;;3181:53;3226:7;3163:2;3206:9;3202:22;3181:53;;;3171:63;;3271:2;3314:9;3310:22;1651:20;3279:63;;3407:2;3396:9;3392:18;3379:32;3431:18;3423:6;3420:30;3417:2;;;-1:-1;;3453:12;3417:2;3483:62;3537:7;3528:6;3517:9;3513:22;3483:62;;;3473:72;;;2966:595;;;;;;;;3568:360;;;3686:2;3674:9;3665:7;3661:23;3657:32;3654:2;;;-1:-1;;3692:12;3654:2;3754:53;3799:7;3775:22;3754:53;;;3744:63;;3844:2;3884:9;3880:22;206:20;32660:5;31033:13;31026:21;32638:5;32635:32;32625:2;;-1:-1;;32671:12;32625:2;3852:60;;;;3648:280;;;;;;3935:366;;;4056:2;4044:9;4035:7;4031:23;4027:32;4024:2;;;-1:-1;;4062:12;4024:2;4124:53;4169:7;4145:22;4124:53;;;4114:63;4214:2;4253:22;;;;1651:20;;-1:-1;;;4018:283;4308:364;;;4428:2;4416:9;4407:7;4403:23;4399:32;4396:2;;;-1:-1;;4434:12;4396:2;353:6;340:20;4486:63;;4586:2;4628:9;4624:22;476:20;501:32;527:5;501:32;;4679:239;;4782:2;4770:9;4761:7;4757:23;4753:32;4750:2;;;-1:-1;;4788:12;4750:2;489:6;476:20;501:32;527:5;501:32;;4925:261;;5039:2;5027:9;5018:7;5014:23;5010:32;5007:2;;;-1:-1;;5045:12;5007:2;628:6;622:13;640:32;666:5;640:32;;5193:347;;5307:2;5295:9;5286:7;5282:23;5278:32;5275:2;;;-1:-1;;5313:12;5275:2;5371:17;5358:31;5409:18;5401:6;5398:30;5395:2;;;-1:-1;;5431:12;5395:2;5461:63;5516:7;5507:6;5496:9;5492:22;5461:63;;5547:241;;5651:2;5639:9;5630:7;5626:23;5622:32;5619:2;;;-1:-1;;5657:12;5619:2;-1:-1;1651:20;;5613:175;-1:-1;5613:175;6272:709;;6459:5;29423:12;29965:6;29960:3;29953:19;30002:4;;29997:3;29993:14;6471:93;;29092:3;-1:-1;29082:14;30002:4;-1:-1;29111:18;-1:-1;6671:288;6696:6;6693:1;6690:13;6671:288;;;32216:11;;7161:37;;5949:14;;;;6718:1;29808:14;;;;6711:9;6671:288;;;-1:-1;6965:10;;6393:588;-1:-1;;;;;6393:588;7317:343;;7459:5;29552:12;29965:6;29960:3;29953:19;7552:52;7597:6;30002:4;29997:3;29993:14;30002:4;7578:5;7574:16;7552:52;;;28553:9;32308:14;-1:-1;;32304:28;7616:39;;;;30002:4;7616:39;;7407:253;-1:-1;;7407:253;17701:262;;7827:5;29552:12;7938:52;7983:6;7978:3;7971:4;7964:5;7960:16;7938:52;;;8002:16;;;;;17826:137;-1:-1;;17826:137;17970:421;;-1:-1;9769:5;9763:12;9803:1;;9792:9;9788:17;9816:1;9811:268;;;;10090:1;10085:425;;;;9781:729;;9811:268;-1:-1;;10016:25;;10004:38;;9885:1;9870:17;;9889:4;9866:28;10056:16;;;-1:-1;9811:268;;10085:425;10154:1;10143:9;10139:17;29092:3;-1:-1;29082:14;29124:4;;-1:-1;29111:18;-1:-1;10343:130;10357:6;10354:1;10351:13;10343:130;;;10416:14;;10403:11;;;10396:35;10450:15;;;;10372:12;;10343:130;;;-1:-1;;;10487:16;;;-1:-1;9781:729;;;;7827:5;29552:12;7938:52;7983:6;7978:3;7971:4;7964:5;7960:16;7938:52;;;8002:16;;18142:249;-1:-1;;;;18142:249;18398:213;-1:-1;;;;;31351:54;;;;6064:45;;18516:2;18501:18;;18487:124;18618:663;-1:-1;;;;;31351:54;;;6064:45;;31351:54;;19035:2;19020:18;;6064:45;19118:2;19103:18;;7161:37;;;18854:3;19155:2;19140:18;;19133:48;;;18618:663;;19195:76;;18839:19;;19257:6;19195:76;;;19187:84;18825:456;-1:-1;;;;;;18825:456;19288:659;;19526:2;19515:9;19511:18;31362:42;;;;;6102:5;31351:54;6071:3;6064:45;19644:2;19526;19644;19633:9;19629:18;19622:48;-1:-1;8895:5;8889:12;8929:1;;8918:9;8914:17;8942:1;8937:248;;;;9196:1;9191:402;;;;8907:686;;8937:248;9034:71;9015:4;9011:1;9000:9;8996:17;8992:28;9093:3;9034:71;;;-1:-1;;9124:25;;9112:38;;9164:14;;;-1:-1;8937:248;;9191:402;9260:1;9249:9;9245:17;9276:71;9340:6;9335:3;9276:71;;;9369:38;9401:5;9369:38;;;-1:-1;9431:130;9445:6;9442:1;9439:13;9431:130;;;9504:14;;9491:11;;;9484:35;9538:15;;;;9460:12;;9431:130;;;9575:11;;;;;-1:-1;;;8907:686;;;;19807:9;19801:4;19797:20;19792:2;19781:9;19777:18;19770:48;19832:105;19932:4;19923:6;19832:105;;;19824:113;19497:450;-1:-1;;;;;;;;19497:450;19954:201;31033:13;;31026:21;7054:34;;20066:2;20051:18;;20037:118;20162:301;;20300:2;20321:17;20314:47;20375:78;20300:2;20289:9;20285:18;20439:6;20375:78;;20470:407;20661:2;20675:47;;;10749:2;20646:18;;;29953:19;10785:34;29993:14;;;10765:55;-1:-1;;;10840:12;;;10833:26;10878:12;;;20632:245;20884:407;21075:2;21089:47;;;11129:2;21060:18;;;29953:19;11165:34;29993:14;;;11145:55;-1:-1;;;11220:12;;;11213:42;11274:12;;;21046:245;21298:407;21489:2;21503:47;;;11525:2;21474:18;;;29953:19;11561:34;29993:14;;;11541:55;-1:-1;;;11616:12;;;11609:30;11658:12;;;21460:245;21712:407;21903:2;21917:47;;;11909:2;21888:18;;;29953:19;11945:34;29993:14;;;11925:55;-1:-1;;;12000:12;;;11993:28;12040:12;;;21874:245;22126:407;22317:2;22331:47;;;12291:2;22302:18;;;29953:19;12327:27;29993:14;;;12307:48;12374:12;;;22288:245;22540:407;22731:2;22745:47;;;12625:2;22716:18;;;29953:19;12661:34;29993:14;;;12641:55;-1:-1;;;12716:12;;;12709:36;12764:12;;;22702:245;22954:407;23145:2;23159:47;;;13015:2;23130:18;;;29953:19;13051:34;29993:14;;;13031:55;13120:26;13106:12;;;13099:48;13166:12;;;23116:245;23368:407;23559:2;23573:47;;;13417:2;23544:18;;;29953:19;13453:34;29993:14;;;13433:55;-1:-1;;;13508:12;;;13501:34;13554:12;;;23530:245;23782:407;23973:2;23987:47;;;13805:2;23958:18;;;29953:19;13841:34;29993:14;;;13821:55;-1:-1;;;13896:12;;;13889:26;13934:12;;;23944:245;24196:407;24387:2;24401:47;;;14185:2;24372:18;;;29953:19;14221:34;29993:14;;;14201:55;-1:-1;;;14276:12;;;14269:36;14324:12;;;24358:245;24610:407;24801:2;24815:47;;;24786:18;;;29953:19;14611:34;29993:14;;;14591:55;14665:12;;;24772:245;25024:407;25215:2;25229:47;;;14916:2;25200:18;;;29953:19;14952:34;29993:14;;;14932:55;-1:-1;;;15007:12;;;15000:33;15052:12;;;25186:245;25438:407;25629:2;25643:47;;;15303:2;25614:18;;;29953:19;15339:34;29993:14;;;15319:55;-1:-1;;;15394:12;;;15387:39;15445:12;;;25600:245;25852:407;26043:2;26057:47;;;15696:2;26028:18;;;29953:19;15732:34;29993:14;;;15712:55;-1:-1;;;15787:12;;;15780:25;15824:12;;;26014:245;26266:407;26457:2;26471:47;;;16075:2;26442:18;;;29953:19;-1:-1;;;29993:14;;;16091:42;16152:12;;;26428:245;26680:407;26871:2;26885:47;;;16403:2;26856:18;;;29953:19;16439:34;29993:14;;;16419:55;-1:-1;;;16494:12;;;16487:41;16547:12;;;26842:245;27094:407;27285:2;27299:47;;;16798:2;27270:18;;;29953:19;16834:26;29993:14;;;16814:47;16880:12;;;27256:245;27508:317;17185:23;;7161:37;;17370:4;17359:16;;;17353:23;-1:-1;;;;;;31199:78;17428:14;;;7269:36;;;;27678:2;27663:18;;27649:176;27832:213;7161:37;;;27950:2;27935:18;;27921:124;28972:173;;29082:14;;;29124:4;29111:18;;;29041:104;31651:268;31716:1;31723:101;31737:6;31734:1;31731:13;31723:101;;;31804:11;;;31798:18;31785:11;;;31778:39;31759:2;31752:10;31723:101;;;31839:6;31836:1;31833:13;31830:2;;;-1:-1;;31716:1;31886:16;;31879:27;31700:219;32455:117;-1:-1;;;;;31351:54;;32514:35;;32504:2;;32563:1;;32553:12;32821:115;-1:-1;;;;;;31199:78;;32879:34;;32869:2;;32927:1;;32917:12",
  "source": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./Models.sol\";\n\ncontract Artisan is Models {\n    event ReturnCreateUser(\n        address userAddress,\n        string userName,\n        uint256[] portfolio\n    );\n\n    function createUser(string memory userName) public {\n        require(\n            addressToUser[msg.sender].userAddress ==\n                0x0000000000000000000000000000000000000000,\n            \"This User already exists\"\n        );\n        addressToUser[msg.sender] = User(\n            msg.sender,\n            userName,\n            new uint256[](0)\n        );\n        emit ReturnCreateUser(\n            addressToUser[msg.sender].userAddress,\n            addressToUser[msg.sender].userName,\n            addressToUser[msg.sender].portfolio\n        );\n    }\n\n    function updateUser(string memory userName) public {\n        require(\n            addressToUser[msg.sender].userAddress !=\n                0x0000000000000000000000000000000000000000,\n            \"User does not exist\"\n        );\n        addressToUser[msg.sender].userName = userName;\n    }\n\n    function deleteUser() public {\n        addressToUser[msg.sender]\n            .userAddress = 0x0000000000000000000000000000000000000000;\n        addressToUser[msg.sender].userName = \"\";\n        addressToUser[msg.sender].portfolio = [0];\n    }\n}\n",
  "sourcePath": "C:\\MyData\\Projects\\Portfolio\\contracts\\Artisan.sol",
  "ast": {
    "absolutePath": "/C/MyData/Projects/Portfolio/contracts/Artisan.sol",
    "exportedSymbols": {
      "Artisan": [
        120
      ]
    },
    "id": 121,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "24:33:0"
      },
      {
        "absolutePath": "/C/MyData/Projects/Portfolio/contracts/Models.sol",
        "file": "./Models.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 121,
        "sourceUnit": 1769,
        "src": "59:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "Models",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1768,
              "src": "103:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Models_$1768",
                "typeString": "contract Models"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "103:6:0"
          }
        ],
        "contractDependencies": [
          1227,
          1768,
          1795,
          1898,
          1951,
          1961,
          3067,
          3170,
          3197,
          3220
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 120,
        "linearizedBaseContracts": [
          120,
          1768,
          1227,
          1898,
          3067,
          3197,
          3220,
          3170,
          1951,
          1961,
          1795
        ],
        "name": "Artisan",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 14,
            "name": "ReturnCreateUser",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "indexed": false,
                  "name": "userAddress",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "148:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "148:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9,
                  "indexed": false,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "177:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "177:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12,
                  "indexed": false,
                  "name": "portfolio",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "202:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "202:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "202:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "138:89:0"
            },
            "src": "116:112:0"
          },
          {
            "body": {
              "id": 64,
              "nodeType": "Block",
              "src": "285:504:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 20,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1441,
                              "src": "316:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 23,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 21,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "330:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 22,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "330:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "316:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1338_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1332,
                          "src": "316:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "373:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "316:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54686973205573657220616c726561647920657869737473",
                        "id": 27,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "429:26:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_dc76c8924ec1b24b5579f020328b41b07df78113bcbc49f66f0de624459da407",
                          "typeString": "literal_string \"This User already exists\""
                        },
                        "value": "This User already exists"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_dc76c8924ec1b24b5579f020328b41b07df78113bcbc49f66f0de624459da407",
                          "typeString": "literal_string \"This User already exists\""
                        }
                      ],
                      "id": 19,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "295:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "295:170:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "295:170:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 30,
                        "name": "addressToUser",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1441,
                        "src": "475:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                          "typeString": "mapping(address => struct Models.User storage ref)"
                        }
                      },
                      "id": 33,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 31,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "489:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "489:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "475:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1338_storage",
                        "typeString": "struct Models.User storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 35,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "521:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "521:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 37,
                          "name": "userName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16,
                          "src": "545:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "581:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 40,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "567:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 38,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "571:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 39,
                              "length": null,
                              "nodeType": "ArrayTypeName",
                              "src": "571:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "567:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        ],
                        "id": 34,
                        "name": "User",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1338,
                        "src": "503:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_User_$1338_storage_ptr_$",
                          "typeString": "type(struct Models.User storage pointer)"
                        }
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "503:90:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1338_memory",
                        "typeString": "struct Models.User memory"
                      }
                    },
                    "src": "475:118:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_User_$1338_storage",
                      "typeString": "struct Models.User storage ref"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "475:118:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 47,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1441,
                            "src": "638:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 50,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 48,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "652:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 49,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "652:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "638:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1338_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 51,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1332,
                        "src": "638:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 52,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1441,
                            "src": "689:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 55,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 53,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "703:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 54,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "703:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "689:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1338_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userName",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1334,
                        "src": "689:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 57,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1441,
                            "src": "737:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 60,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 58,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "751:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "751:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "737:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1338_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 61,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "portfolio",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1337,
                        "src": "737:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      ],
                      "id": 46,
                      "name": "ReturnCreateUser",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "608:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (address,string memory,uint256[] memory)"
                      }
                    },
                    "id": 62,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "608:174:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 63,
                  "nodeType": "EmitStatement",
                  "src": "603:179:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "507ffba5",
            "id": 65,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 65,
                  "src": "254:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 15,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "254:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "253:24:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "285:0:0"
            },
            "scope": 120,
            "src": "234:555:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "846:237:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 77,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 71,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1441,
                              "src": "877:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 74,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 72,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "891:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 73,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "891:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "877:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1338_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 75,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1332,
                          "src": "877:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "934:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "877:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5573657220646f6573206e6f74206578697374",
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "990:21:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        },
                        "value": "User does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        }
                      ],
                      "id": 70,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "856:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 79,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "856:165:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80,
                  "nodeType": "ExpressionStatement",
                  "src": "856:165:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 81,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1031:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 84,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 82,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1045:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 83,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1045:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1031:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 85,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1334,
                      "src": "1031:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 86,
                      "name": "userName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 67,
                      "src": "1068:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1031:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "1031:45:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "0b4f12f6",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 90,
                  "src": "815:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 66,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "815:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "814:24:0"
            },
            "returnParameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "846:0:0"
            },
            "scope": 120,
            "src": "795:288:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "1118:212:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 93,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1128:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 96,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1142:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1142:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1128:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1332,
                      "src": "1128:50:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                      "id": 98,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1181:42:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "value": "0x0000000000000000000000000000000000000000"
                    },
                    "src": "1128:95:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 100,
                  "nodeType": "ExpressionStatement",
                  "src": "1128:95:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 101,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1233:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 104,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 102,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1247:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1247:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1233:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 105,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1334,
                      "src": "1233:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "",
                      "id": 106,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1270:2:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                        "typeString": "literal_string \"\""
                      },
                      "value": ""
                    },
                    "src": "1233:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 108,
                  "nodeType": "ExpressionStatement",
                  "src": "1233:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 109,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1282:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 112,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 110,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1296:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1296:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1282:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 113,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "portfolio",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1337,
                      "src": "1282:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1321:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "id": 115,
                      "isConstant": false,
                      "isInlineArray": true,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "1320:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint8_$1_memory_ptr",
                        "typeString": "uint8[1] memory"
                      }
                    },
                    "src": "1282:41:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "1282:41:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "026ff05e",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1108:2:0"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1118:0:0"
            },
            "scope": 120,
            "src": "1089:241:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 121,
        "src": "83:1249:0"
      }
    ],
    "src": "0:1333:0"
  },
  "legacyAST": {
    "absolutePath": "/C/MyData/Projects/Portfolio/contracts/Artisan.sol",
    "exportedSymbols": {
      "Artisan": [
        120
      ]
    },
    "id": 121,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "24:33:0"
      },
      {
        "absolutePath": "/C/MyData/Projects/Portfolio/contracts/Models.sol",
        "file": "./Models.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 121,
        "sourceUnit": 1769,
        "src": "59:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "Models",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1768,
              "src": "103:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Models_$1768",
                "typeString": "contract Models"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "103:6:0"
          }
        ],
        "contractDependencies": [
          1227,
          1768,
          1795,
          1898,
          1951,
          1961,
          3067,
          3170,
          3197,
          3220
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 120,
        "linearizedBaseContracts": [
          120,
          1768,
          1227,
          1898,
          3067,
          3197,
          3220,
          3170,
          1951,
          1961,
          1795
        ],
        "name": "Artisan",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 14,
            "name": "ReturnCreateUser",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "indexed": false,
                  "name": "userAddress",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "148:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "148:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9,
                  "indexed": false,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "177:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "177:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12,
                  "indexed": false,
                  "name": "portfolio",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 14,
                  "src": "202:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "202:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "202:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "138:89:0"
            },
            "src": "116:112:0"
          },
          {
            "body": {
              "id": 64,
              "nodeType": "Block",
              "src": "285:504:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 20,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1441,
                              "src": "316:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 23,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 21,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "330:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 22,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "330:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "316:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1338_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1332,
                          "src": "316:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "373:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "316:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "54686973205573657220616c726561647920657869737473",
                        "id": 27,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "429:26:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_dc76c8924ec1b24b5579f020328b41b07df78113bcbc49f66f0de624459da407",
                          "typeString": "literal_string \"This User already exists\""
                        },
                        "value": "This User already exists"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_dc76c8924ec1b24b5579f020328b41b07df78113bcbc49f66f0de624459da407",
                          "typeString": "literal_string \"This User already exists\""
                        }
                      ],
                      "id": 19,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "295:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "295:170:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "295:170:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 30,
                        "name": "addressToUser",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1441,
                        "src": "475:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                          "typeString": "mapping(address => struct Models.User storage ref)"
                        }
                      },
                      "id": 33,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 31,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "489:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "489:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "475:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1338_storage",
                        "typeString": "struct Models.User storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 35,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "521:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "521:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 37,
                          "name": "userName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16,
                          "src": "545:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "581:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 40,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "567:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 38,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "571:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 39,
                              "length": null,
                              "nodeType": "ArrayTypeName",
                              "src": "571:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "567:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                            "typeString": "uint256[] memory"
                          }
                        ],
                        "id": 34,
                        "name": "User",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1338,
                        "src": "503:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_User_$1338_storage_ptr_$",
                          "typeString": "type(struct Models.User storage pointer)"
                        }
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "503:90:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_User_$1338_memory",
                        "typeString": "struct Models.User memory"
                      }
                    },
                    "src": "475:118:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_User_$1338_storage",
                      "typeString": "struct Models.User storage ref"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "475:118:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 47,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1441,
                            "src": "638:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 50,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 48,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "652:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 49,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "652:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "638:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1338_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 51,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1332,
                        "src": "638:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 52,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1441,
                            "src": "689:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 55,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 53,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "703:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 54,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "703:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "689:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1338_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "userName",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1334,
                        "src": "689:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 57,
                            "name": "addressToUser",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1441,
                            "src": "737:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                              "typeString": "mapping(address => struct Models.User storage ref)"
                            }
                          },
                          "id": 60,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 58,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "751:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "751:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "737:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_User_$1338_storage",
                            "typeString": "struct Models.User storage ref"
                          }
                        },
                        "id": 61,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "portfolio",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1337,
                        "src": "737:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      ],
                      "id": 46,
                      "name": "ReturnCreateUser",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "608:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (address,string memory,uint256[] memory)"
                      }
                    },
                    "id": 62,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "608:174:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 63,
                  "nodeType": "EmitStatement",
                  "src": "603:179:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "507ffba5",
            "id": 65,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 65,
                  "src": "254:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 15,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "254:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "253:24:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "285:0:0"
            },
            "scope": 120,
            "src": "234:555:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "846:237:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 77,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 71,
                              "name": "addressToUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1441,
                              "src": "877:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                                "typeString": "mapping(address => struct Models.User storage ref)"
                              }
                            },
                            "id": 74,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 72,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "891:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 73,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "891:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "877:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$1338_storage",
                              "typeString": "struct Models.User storage ref"
                            }
                          },
                          "id": 75,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "userAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1332,
                          "src": "877:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "934:42:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "value": "0x0000000000000000000000000000000000000000"
                        },
                        "src": "877:99:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5573657220646f6573206e6f74206578697374",
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "990:21:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        },
                        "value": "User does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1",
                          "typeString": "literal_string \"User does not exist\""
                        }
                      ],
                      "id": 70,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "856:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 79,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "856:165:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80,
                  "nodeType": "ExpressionStatement",
                  "src": "856:165:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 81,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1031:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 84,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 82,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1045:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 83,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1045:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1031:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 85,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1334,
                      "src": "1031:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 86,
                      "name": "userName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 67,
                      "src": "1068:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1031:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "1031:45:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "0b4f12f6",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "userName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 90,
                  "src": "815:22:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 66,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "815:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "814:24:0"
            },
            "returnParameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "846:0:0"
            },
            "scope": 120,
            "src": "795:288:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "1118:212:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 93,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1128:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 96,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1142:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1142:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1128:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1332,
                      "src": "1128:50:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030",
                      "id": 98,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1181:42:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "value": "0x0000000000000000000000000000000000000000"
                    },
                    "src": "1128:95:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 100,
                  "nodeType": "ExpressionStatement",
                  "src": "1128:95:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 101,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1233:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 104,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 102,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1247:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1247:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1233:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 105,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "userName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1334,
                      "src": "1233:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "",
                      "id": 106,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1270:2:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                        "typeString": "literal_string \"\""
                      },
                      "value": ""
                    },
                    "src": "1233:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 108,
                  "nodeType": "ExpressionStatement",
                  "src": "1233:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 109,
                          "name": "addressToUser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1441,
                          "src": "1282:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$1338_storage_$",
                            "typeString": "mapping(address => struct Models.User storage ref)"
                          }
                        },
                        "id": 112,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 110,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1296:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1296:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1282:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$1338_storage",
                          "typeString": "struct Models.User storage ref"
                        }
                      },
                      "id": 113,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "portfolio",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1337,
                      "src": "1282:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1321:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "id": 115,
                      "isConstant": false,
                      "isInlineArray": true,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "1320:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint8_$1_memory_ptr",
                        "typeString": "uint8[1] memory"
                      }
                    },
                    "src": "1282:41:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "1282:41:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "026ff05e",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteUser",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1108:2:0"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1118:0:0"
            },
            "scope": 120,
            "src": "1089:241:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 121,
        "src": "83:1249:0"
      }
    ],
    "src": "0:1333:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.2+commit.bacdbe57.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        "0xdb08a06eba245dbd34ffbd08b80e14e9acdd66a8ca6f8f1f035348ced6ef7dc7": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "_hash",
              "type": "string"
            }
          ],
          "name": "DataStoredInTheLog",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0x1762e6485dad7c291ae8191119acded92bd07cda85e738e1e570a5949d5a264b": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "userName",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "portfolio",
              "type": "uint256[]"
            }
          ],
          "name": "ReturnCreateUser",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        "0x4893c8577e724f997ce2a66eaa3376f5921e8c449711fa299dadf3dc2b688a98": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "AssetID",
              "type": "uint256"
            }
          ],
          "name": "returnAID",
          "type": "event"
        },
        "0x7bb34176ea5c54ad2400ab070d5ea84ffa3016a701e16082f71d4ff48d004f34": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "CertificateID",
              "type": "uint256"
            }
          ],
          "name": "returnCID",
          "type": "event"
        },
        "0xa323dbc7f3cc04e17c7c12b5263e160308382919b308390323d16caf0c3d5304": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "LicenseID",
              "type": "uint256"
            }
          ],
          "name": "returnLID",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xB6C5C7Ed3D839Da5944B5A1094931dE23e94dD13",
      "transactionHash": "0xa96b5b825e350b67348000c2d301aa353a4bd52f3bb8392268247f2d5127c828"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-06-29T21:00:32.023Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "name()": {
        "details": "Gets the token name.",
        "returns": {
          "_0": "string representing the token name"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "returns": {
          "_0": "string representing the token symbol"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner.",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list owned by the requested address"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the URI for a given token ID. May return an empty string.     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}).     * If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings.     * .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \"\" | \"\" | \"\" | \"\" | \"token.uri/123\" | \"token.uri/123\" | \"token.uri/\" | \"123\" | \"token.uri/123\" | \"token.uri/\" | \"\" | \"token.uri/<tokenId>\" |===     * Requirements:     * - `tokenId` must exist."
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract.",
        "returns": {
          "_0": "uint256 representing the total amount of tokens"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}